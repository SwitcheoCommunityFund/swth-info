import { Network } from "../types";
export interface WsGetRecentTradesParams {
    market: string;
}
export interface WsGetCandlesticksParams {
    market: string;
    resolution: string;
    from?: string;
    to?: string;
}
export interface WsGetOrderHistoryParams {
    market: string;
    address: string;
}
export interface WsGetOpenOrdersParams {
    market: string;
    address: string;
}
export interface WsGetAccountTradesParams {
    market: string;
    address: string;
    page?: number;
}
export interface WsGetMarketStatsParams {
    market: string;
}
export interface WsGetLeveragesParams {
    market: string;
    address: string;
}
export interface WsGetPositionsParams {
    market: string;
    address: string;
}
export interface WsSubscribeCandlesticksParams {
    channel: string;
    market: string;
    resolution: string;
    subscribeUID: string;
}
export interface WsSubscribeRecentTradesParams {
    channel: string;
    market: string;
}
export interface WsSubscribeOrdersParams {
    channel: string;
    market?: string;
    address: string;
}
export interface WsSubscribeBooksParams {
    channel: string;
    market: string;
}
export interface WsSubscribeWalletBalanceParams {
    channel: string;
    address: string;
}
export interface WsSubscribeAccountTradesParams {
    channel: string;
    market?: string;
    address: string;
}
export interface WsSubscribeMarketStatsParams {
    channel: string;
    market?: string;
}
export interface WsSubscribeLeveragesParams {
    channel: string;
    market?: string;
    address: string;
}
export interface WsSubscribePositionsParams {
    channel: string;
    market?: string;
    address: string;
}
export interface WsUnsubscribeCandlesticksParams {
    channel: string;
    market: string;
    resolution: string;
}
export declare type WsSubscribeParams = WsSubscribeCandlesticksParams | WsSubscribeRecentTradesParams | WsSubscribeOrdersParams | WsSubscribeWalletBalanceParams | WsSubscribeBooksParams | WsSubscribeAccountTradesParams | WsSubscribeMarketStatsParams | WsSubscribeLeveragesParams | WsUnsubscribeCandlesticksParams;
/**
 * @deprecated
 * use WSConnector
 */
export declare class WsWrapper {
    serverWsUrl: string;
    socket: any;
    msgNum: number;
    isConnected: boolean;
    onMsgCallback: any;
    getBaseUrls: (network: any) => string;
    constructor(net: Network, onMsgCallback: any);
    connect(): void;
    disconnect(): void;
    checkIsConnected(): boolean;
    wsGetOrderHistory(msgId: string, params: WsGetOrderHistoryParams): void;
    wsGetRecentTrades(msgId: string, p: WsGetRecentTradesParams): void;
    wsGetCandlesticks(msgId: string, p: WsGetCandlesticksParams): void;
    wsGetOpenOrders(msgId: string, params: WsGetOpenOrdersParams): void;
    wsGetAccountTrades(msgId: string, params: WsGetAccountTradesParams): void;
    wsGetMarketStats(msgId: string, params: WsGetMarketStatsParams): void;
    wsGetLeverages(msgId: string, params: WsGetLeveragesParams): void;
    wsGetOpenPositions(msgId: string, params: WsGetLeveragesParams): void;
    wsGetClosedPositions(msgId: string, params: WsGetLeveragesParams): void;
    subscribe(msgId: string, params: WsSubscribeParams[]): void;
    unsubscribe(msgId: string, params: WsSubscribeParams[]): void;
    static parseChannelId: (rawChannelId: string) => any;
    generateChannelId(p: WsSubscribeParams): string;
}
