"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsClient = exports.ClientEvent = exports.MarketEvent = void 0;
var events_1 = require("events");
var config_1 = require("../config");
var isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
/**
 * @deprecated use WSConnector
 */
var MarketEvent;
(function (MarketEvent) {
    MarketEvent["SUB_MARKET_STATS"] = "market:sub:market_stats";
})(MarketEvent = exports.MarketEvent || (exports.MarketEvent = {}));
/**
 * @deprecated use WSConnector
 */
var ClientEvent;
(function (ClientEvent) {
    ClientEvent["Connected"] = "connected";
    ClientEvent["Disconnected"] = "disconnected";
    ClientEvent["Message"] = "message";
})(ClientEvent = exports.ClientEvent || (exports.ClientEvent = {}));
/**
 * @deprecated use WSConnector
 */
var WsClient = /** @class */ (function (_super) {
    __extends(WsClient, _super);
    // private channelIdToId: Map<string, string> = new Map()
    function WsClient(network) {
        var _this = _super.call(this) || this;
        // this.socket = this.newWebSocket(getNetwork(network).WS_URL)
        _this.baseUrl = config_1.getNetwork(network).WS_URL;
        return _this;
    }
    // private newWebSocket(): WebSocket {
    //   this.socket = new WebSocket(this.baseUrl)
    //   this.socket.onopen = () => {
    //     console.log('ws connected')
    //     this.emit(ClientEvent.Connect)
    //   }
    //   this.socket.onclose = () => this.emit(ClientEvent.Disconnect)
    // this.socket.onmessage = (message) => {
    //   console.log('message', message)
    //   const data = JSON.parse(message.data)
    //   const {channel, result} = data
    //   let {id} = data
    //   if (id) {
    //     const action = id.split(':')[1]
    //     if (action === 'sub') {
    //       const [channelId] = result
    //       this.channelIdToId.set(channelId, id)
    //       id += ':ack'
    //     }
    //   } else if (channel) {
    //     id = this.channelIdToId.get(channel)
    //   }
    //   else {
    //     console.error('Unknown event:', data)
    //     return
    //   }
    //   const [clientName] = id.split(':')
    //   const event = {...data, id}
    //   const client = this[clientName]
    //   if (client) {
    //     client.ws.handleEvent(event)
    //   } else {
    //     console.error('Unknown client:', clientName)
    //   }
    // }
    // }
    WsClient.prototype.connect = function () {
        var _this = this;
        this.socket = new isomorphic_ws_1.default(this.baseUrl);
        this.socket.onopen = function () {
            _this.emit(ClientEvent.Connected);
        };
        this.socket.onclose = function () { return _this.emit(ClientEvent.Disconnected); };
        this.socket.onmessage = function (message) {
            var data = JSON.parse(message.data);
            _this.emit(ClientEvent.Message, data);
            // const { channel, result } = data
            // let {id} = data
            // if (id) {
            //   const action = id.split(':')[1]
            //   if (action === 'sub') {
            //     const [channelId] = result
            //     this.channelIdToId.set(channelId, id)
            //     id += ':ack'
            //   }
            // } else if (channel) {
            //   id = this.channelIdToId.get(channel)
            // }
            // else {
            //   console.error('Unknown event:', data)
            //   return
            // }
            // const [clientName] = id.split(':')
            // const event = {...data, id}
            // const client = this[clientName]
            // if (client) {
            //   client.ws.handleEvent(event)
            // } else {
            //   console.error('Unknown client:', clientName)
            // }
        };
    };
    WsClient.prototype.disconnect = function () {
        this.socket.close();
        this.emit(ClientEvent.Disconnected);
    };
    WsClient.prototype.handleEvent = function (event) {
        this.emit(event.id, event);
    };
    WsClient.prototype.send = function (id, method, params) {
        try {
            this.socket.send(JSON.stringify({
                id: id,
                method: method,
                params: params,
            }));
        }
        catch (e) {
            console.error(e.message);
        }
    };
    WsClient.prototype.subscribe = function (id, channelId) {
        try {
            this.send(id, 'subscribe', { channels: [channelId] });
        }
        catch (e) {
            console.error(e.message);
        }
    };
    WsClient.prototype.unsubscribe = function (id, channelId) {
        try {
            this.socket.send(JSON.stringify({
                id: id,
                method: 'unsubscribe',
                params: { 'channels': [channelId] }
            }));
        }
        catch (e) {
            console.error(e.message);
        }
    };
    WsClient.prototype.subscribeMarketStats = function () {
        var channelId = 'market_stats';
        var id = "market:sub:" + channelId;
        this.subscribe(id, channelId);
    };
    WsClient.prototype.unsubscribeMarketStats = function () {
        var channelId = 'market_stats';
        var id = "market:unsub:" + channelId;
        this.unsubscribe(id, channelId);
    };
    return WsClient;
}(events_1.EventEmitter));
exports.WsClient = WsClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NsaWVudHMvd3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlDQUFxQztBQUNyQyxvQ0FBc0M7QUFDdEMsZ0VBQXFDO0FBRXJDOztHQUVHO0FBQ0gsSUFBWSxXQUVYO0FBRkQsV0FBWSxXQUFXO0lBQ3JCLDJEQUE0QyxDQUFBO0FBQzlDLENBQUMsRUFGVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQUV0QjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxXQUlYO0FBSkQsV0FBWSxXQUFXO0lBQ3JCLHNDQUF1QixDQUFBO0lBQ3ZCLDRDQUE2QixDQUFBO0lBQzdCLGtDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFKVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQUl0QjtBQUdEOztHQUVHO0FBQ0g7SUFBOEIsNEJBQVk7SUFHeEMseURBQXlEO0lBRXpELGtCQUFZLE9BQWU7UUFBM0IsWUFDRSxpQkFBTyxTQUdSO1FBRkMsOERBQThEO1FBQzlELEtBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUE7O0lBQzNDLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsOENBQThDO0lBRTlDLGlDQUFpQztJQUNqQyxrQ0FBa0M7SUFDbEMscUNBQXFDO0lBQ3JDLE1BQU07SUFDTixrRUFBa0U7SUFFaEUseUNBQXlDO0lBQ3pDLG9DQUFvQztJQUNwQywwQ0FBMEM7SUFDMUMsbUNBQW1DO0lBRW5DLG9CQUFvQjtJQUNwQixjQUFjO0lBQ2Qsc0NBQXNDO0lBQ3RDLDhCQUE4QjtJQUM5QixtQ0FBbUM7SUFDbkMsOENBQThDO0lBQzlDLHFCQUFxQjtJQUNyQixRQUFRO0lBQ1IsMEJBQTBCO0lBQzFCLDJDQUEyQztJQUMzQyxNQUFNO0lBQ04sV0FBVztJQUNYLDRDQUE0QztJQUM1QyxhQUFhO0lB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