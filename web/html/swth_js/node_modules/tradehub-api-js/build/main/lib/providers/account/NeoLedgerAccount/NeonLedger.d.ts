import Transport from "@ledgerhq/hw-transport";
/**
 * Duplicated from @cityofzion/neon-ledger due to package incompatibility:
 * transpiled JS version throws "Cannot find module './plugin'"
 */
export declare enum ErrorCode {
    VALID_STATUS = 36864,
    MSG_TOO_BIG = 27912,
    APP_CLOSED = 28160,
    TX_DENIED = 27013
}
export interface TransportStatusError extends Error {
    name: "TransportStatusError";
    message: string;
    stack: Error["stack"];
    statusCode: number;
    statusText: string;
}
/**
 * Evaluates Transport Error thrown and rewrite the error message to be more user friendly.
 * @return error with modified message if found.
 */
export declare function evalTransportError(err: Error): Error;
/**
 * Returns a BIP44 string specific to NEO.
 */
export declare function getNEOBIP44String(address?: number, change?: number, account?: number): string;
/**
 * Returns the list of connected Ledger devices. Throw if Ledger is not supported by the computer.
 * @param ledgerLibrary
 */
export declare function getDevicePaths(ledgerLibrary: typeof Transport): Promise<ReadonlyArray<string>>;
/**
 * Requests the public key of a requested address from the Ledger.
 * @param ledger The Ledger Transport.
 * @param bip44String The BIP44 string (40 bytes)
 * @returns An unencoded public key (65 bytes)
 */
export declare function getPublicKey(ledger: Transport, bip44String: string): Promise<string>;
/**
 * Requests the device to sign a message using the NEO application.
 * @param ledger The Ledger Transport.
 * @param hex The message to sign as a hexstring.
 * @param bip44String The BIP44 string (40 bytes)
 * @returns Signature as a hexstring (64 bytes)
 */
export declare function getSignature(ledger: Transport, hex: string, bip44String: string): Promise<string>;
/**
 * Converts a signature in DER format to HEX format.
 * @param response Signature in DER format
 * @returns Signature in HEX format (64 bytes)
 */
export declare function DerToHexSignature(response: string): string;
declare const _default: {
    getDevicePaths: typeof getDevicePaths;
    getPublicKey: typeof getPublicKey;
    getSignature: typeof getSignature;
};
export default _default;
