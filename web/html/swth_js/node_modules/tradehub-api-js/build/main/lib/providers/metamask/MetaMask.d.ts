import { ethers } from 'ethers';
import { Network } from '../../types';
interface RequestArguments {
    method: string;
    params?: unknown[] | object;
}
interface MetaMaskAPI {
    isConnected: () => boolean;
    request: (args: RequestArguments) => Promise<unknown>;
}
export interface CallContractArgs {
    from?: string;
    value?: string;
    data?: string;
}
/**
 * TODO: Add docs
 */
export declare class MetaMask {
    readonly network: Network;
    private metamaskAPI;
    readonly provider: ethers.providers.Provider | null;
    constructor(network: Network);
    private checkProvider;
    getConnectedAPI(): Promise<MetaMaskAPI>;
    connect(): Promise<MetaMaskAPI>;
    defaultAccount(): Promise<string>;
    getStoredMnemonicCipher(account: string): Promise<string | undefined>;
    encryptMnemonic(mnemonic: string): Promise<string>;
    storeMnemonic(encryptedMnemonic: string): Promise<unknown>;
    login(): Promise<string | null>;
    private getContractHash;
}
export default MetaMask;
