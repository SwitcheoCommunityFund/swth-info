"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NEOAddress = exports.SWTHAddress = exports.wifEncodePrivateKey = exports.randomMnemonic = exports.stringOrBufferToBuffer = void 0;
var BIP32 = __importStar(require("bip32"));
var BIP39 = __importStar(require("bip39"));
var bip44_constants_1 = __importDefault(require("bip44-constants"));
var wallet_1 = require("./wallet");
var secp256r1 = __importStar(require("secp256r1"));
var secp256k1 = __importStar(require("secp256k1"));
var sha_js_1 = require("sha.js");
var bech32 = __importStar(require("bech32"));
var wif = __importStar(require("wif"));
var ripemd160 = __importStar(require("ripemd160"));
var Base58Check = __importStar(require("base58check"));
var config_1 = require("../config");
var BIP44_PURPOSE = 44;
var NEO_NAME = 'NEO';
var NEO_TOKEN_BIP44 = bip44_constants_1.default.filter(function (coin) { return coin[1] === NEO_NAME; })[0];
var NEO_COIN_TYPE = NEO_TOKEN_BIP44[0] - 0x80000000;
var SWTH_COIN_TYPE = 118;
/**
 * Convenience function to coalesce a string/buffer into a buffer
 *
 * @param stringOrBuffer a string or buffer type
 * @param encoding BufferEncoding from Buffer
 * @param force option to return an empty buffer regardless of input
 */
exports.stringOrBufferToBuffer = function (stringOrBuffer, encoding, force) {
    if (encoding === void 0) { encoding = 'hex'; }
    if (force === void 0) { force = false; }
    if (typeof stringOrBuffer === 'string') {
        return Buffer.from(stringOrBuffer, encoding);
    }
    if (stringOrBuffer instanceof Buffer) {
        return stringOrBuffer;
    }
    // not a string nor buffer
    // e.g. null/undefined
    if (force) {
        return Buffer.alloc(0);
    }
    // if not forcing to return an empty buffer, return null
    return null;
};
exports.randomMnemonic = function () {
    return BIP39.generateMnemonic();
};
exports.wifEncodePrivateKey = function (privateKey, iter) {
    if (iter === void 0) { iter = 128; }
    var privateKeyBuf = exports.stringOrBufferToBuffer(privateKey);
    return wif.encode(iter, privateKeyBuf, true);
};
exports.SWTHAddress = {
    coinType: function () {
        return SWTH_COIN_TYPE;
    },
    publicKeyToScriptHash: function (publicKey) {
        var sha256Hash = new sha_js_1.sha256().update(publicKey).digest();
        var ripemdHash = new ripemd160().update(sha256Hash).digest('hex');
        return ripemdHash;
    },
    publicKeyToAddress: function (publicKey, opts) {
        var scriptHash = exports.SWTHAddress.publicKeyToScriptHash(publicKey);
        var words = bech32.toWords(Buffer.from(scriptHash));
        var addressPrefix = config_1.getBech32Prefix(opts.network, opts.type);
        var addressBech32 = bech32.encode(addressPrefix, words);
        return addressBech32;
    },
    encodePublicKey: function () {
        throw new Error('SWTH public keys do not compress');
    },
    mnemonicToPrivateKey: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var coinType = exports.SWTHAddress.coinType();
        var path = new wallet_1.BIP44(BIP44_PURPOSE, coinType).pathString(account);
        var seed = BIP39.mnemonicToSeedSync(mnemonic);
        var masterKey = BIP32.fromSeed(seed);
        var hardenedDerivation = masterKey.derivePath(path);
        var privateKey = hardenedDerivation.privateKey;
        if (!privateKey)
            throw new Error('Private key derivation from mnemonic failed');
        return privateKey;
    },
    generateAddress: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var privateKey = exports.SWTHAddress.mnemonicToPrivateKey(mnemonic, account);
        var publicKeyUint8Array = secp256k1.publicKeyCreate(privateKey, true);
        var publicKey = Buffer.from(publicKeyUint8Array);
        var address = exports.SWTHAddress.publicKeyToAddress(publicKey);
        return address;
    },
};
exports.NEOAddress = {
    coinType: function () {
        return NEO_COIN_TYPE;
    },
    publicKeyToScriptHash: function (publicKey) {
        var encodedPublicKey = exports.NEOAddress.encodePublicKey(publicKey);
        var addressScript = Buffer.concat([
            Buffer.from([0x21]),
            encodedPublicKey,
            Buffer.from([0xac]),
        ]);
        var sha256Hash = new sha_js_1.sha256().update(addressScript).digest();
        var ripemdHash = new ripemd160().update(sha256Hash).digest('hex');
        return ripemdHash;
    },
    publicKeyToAddress: function (publicKey) {
        var addressScript = exports.NEOAddress.publicKeyToScriptHash(publicKey);
        var address = Base58Check.encode(addressScript, '17');
        return address;
    },
    encodePublicKey: function (unencodedPublicKey) {
        var unencPubKeyBuf = exports.stringOrBufferToBuffer(unencodedPublicKey);
        if (unencPubKeyBuf.length <= 33) {
            // length indicates already encoded
            return unencPubKeyBuf;
        }
        var pointXHex = unencPubKeyBuf.slice(1, 33);
        var pointYEven = unencPubKeyBuf[unencPubKeyBuf.length - 1] % 2 === 0;
        var compressedPublicKey = Buffer.concat([
            Buffer.from([pointYEven ? 0x02 : 0x03]),
            pointXHex,
        ]);
        return compressedPublicKey;
    },
    mnemonicToPrivateKey: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var coinType = exports.NEOAddress.coinType();
        var path = new wallet_1.BIP44(BIP44_PURPOSE, coinType).pathString(account);
        var seed = BIP39.mnemonicToSeedSync(mnemonic);
        var masterKey = BIP32.fromSeed(seed);
        var hardenedDerivation = masterKey.derivePath(path);
        var privateKey = hardenedDerivation.privateKey;
        if (!privateKey)
            throw new Error('Private key derivation from mnemonic failed');
        return privateKey;
    },
    generateAddress: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var privateKey = exports.NEOAddress.mnemonicToPrivateKey(mnemonic, account);
        var publicKeyUint8Array = secp256r1.publicKeyCreate(privateKey, true);
        var compressedPublicKey = Buffer.from(publicKeyUint8Array);
        var address = exports.NEOAddress.publicKeyToAddress(compressedPublicKey);
        return address;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbHMvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQThCO0FBQzlCLDJDQUE4QjtBQUM5QixvRUFBNEM7QUFDNUMsbUNBQWdDO0FBQ2hDLG1EQUFzQztBQUN0QyxtREFBc0M7QUFDdEMsaUNBQStCO0FBQy9CLDZDQUFnQztBQUNoQyx1Q0FBMEI7QUFDMUIsbURBQXNDO0FBQ3RDLHVEQUEwQztBQUUxQyxvQ0FBb0Q7QUFFcEQsSUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFBO0FBRXhCLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQTtBQUNmLElBQUEsZUFBZSxHQUFJLHlCQUFjLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBcEIsQ0FBb0IsQ0FBQyxHQUF2RCxDQUF1RDtBQUM3RSxJQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFBO0FBRXJELElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQTtBQUUxQjs7Ozs7O0dBTUc7QUFDVSxRQUFBLHNCQUFzQixHQUFHLFVBQ3BDLGNBQWdDLEVBQ2hDLFFBQWdDLEVBQ2hDLEtBQXNCO0lBRHRCLHlCQUFBLEVBQUEsZ0JBQWdDO0lBQ2hDLHNCQUFBLEVBQUEsYUFBc0I7SUFFdEIsSUFBSSxPQUFPLGNBQWMsS0FBSyxRQUFRLEVBQUU7UUFDdEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQTtLQUM3QztJQUVELElBQUksY0FBYyxZQUFZLE1BQU0sRUFBRTtRQUNwQyxPQUFPLGNBQXdCLENBQUE7S0FDaEM7SUFFRCwwQkFBMEI7SUFDMUIsc0JBQXNCO0lBQ3RCLElBQUksS0FBSyxFQUFFO1FBQ1Qs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