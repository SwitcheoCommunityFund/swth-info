"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPath = exports.getPathArray = exports.BIP44 = exports.Address = exports.PubKeySecp256k1 = exports.PrivKeySecp256k1 = void 0;
// tslint:disable:max-classes-per-file
var bech32_1 = __importDefault(require("bech32"));
var ripemd160_1 = __importDefault(require("ripemd160"));
var secp256k1_1 = __importDefault(require("secp256k1"));
var sha_js_1 = require("sha.js");
var PrivKeySecp256k1 = /** @class */ (function () {
    function PrivKeySecp256k1(privKey) {
        this.privKey = privKey;
    }
    PrivKeySecp256k1.prototype.toBytes = function () {
        // return marshalBinaryBare(this) // stub marshalBinaryBare with Uint8Array
        return new Uint8Array(this.privKey);
    };
    PrivKeySecp256k1.prototype.toPubKey = function () {
        var pubKey = secp256k1_1.default.publicKeyCreate(Buffer.from(this.privKey), true);
        return new PubKeySecp256k1(Buffer.from(pubKey));
    };
    PrivKeySecp256k1.prototype.equals = function (privKey) {
        return this.toBytes().toString() === privKey.toBytes().toString();
    };
    PrivKeySecp256k1.prototype.sign = function (msg) {
        return secp256k1_1.default.ecdsaSign(Buffer.from(new sha_js_1.sha256().update(msg).digest()), Buffer.from(this.privKey));
    };
    return PrivKeySecp256k1;
}());
exports.PrivKeySecp256k1 = PrivKeySecp256k1;
var PubKeySecp256k1 = /** @class */ (function () {
    function PubKeySecp256k1(pubKey) {
        this.pubKey = pubKey;
    }
    PubKeySecp256k1.prototype.toBytes = function () {
        // return marshalBinaryBare(this)
        return new Uint8Array(this.pubKey);
    };
    PubKeySecp256k1.prototype.toAddress = function () {
        var hash = new sha_js_1.sha256().update(this.pubKey).digest('latin1');
        hash = new ripemd160_1.default().update(hash, 'latin1').digest('hex');
        return new Address(Buffer.from(hash, 'hex'));
    };
    PubKeySecp256k1.prototype.equals = function (pubKey) {
        return this.toBytes().toString() === pubKey.toBytes().toString();
    };
    PubKeySecp256k1.prototype.verify = function (msg, sig) {
        return secp256k1_1.default.ecdsaVerify(Buffer.from(msg), Buffer.from(sig), Buffer.from(this.pubKey));
    };
    return PubKeySecp256k1;
}());
exports.PubKeySecp256k1 = PubKeySecp256k1;
var Address = /** @class */ (function () {
    function Address(address) {
        this.address = address;
    }
    Address.fromBech32 = function (prefix, bech32Addr) {
        var _a = bech32_1.default.decode(bech32Addr), b32Prefix = _a.prefix, words = _a.words;
        if (b32Prefix !== prefix) {
            throw new Error("Prefix doesn't match");
        }
        return new Address(bech32_1.default.fromWords(words));
    };
    Address.prototype.toBech32 = function (prefix) {
        var words = bech32_1.default.toWords(Buffer.from(this.address));
        return bech32_1.default.encode(prefix, words);
    };
    Address.prototype.toBytes = function () {
        return new Uint8Array(this.address);
    };
    return Address;
}());
exports.Address = Address;
var BIP44 = /** @class */ (function () {
    function BIP44(purpose, coinType, account) {
        if (purpose === void 0) { purpose = 44; }
        if (coinType === void 0) { coinType = 118; }
        if (account === void 0) { account = 0; }
        this.purpose = purpose;
        this.coinType = coinType;
        this.account = account;
    }
    BIP44.prototype.path = function (index, change) {
        if (change === void 0) { change = 0; }
        if (this.purpose !== parseInt(this.purpose.toString(), 10)) {
            throw new Error('Purpose should be integer');
        }
        if (this.coinType !== parseInt(this.coinType.toString(), 10)) {
            throw new Error('CoinType should be integer');
        }
        if (this.account !== parseInt(this.account.toString(), 10)) {
            throw new Error('Account should be integer');
        }
        if (change !== parseInt(change.toString(), 10)) {
            throw new Error('Change should be integer');
        }
        if (index !== parseInt(index.toString(), 10)) {
            throw new Error('Index should be integer');
        }
        return [this.purpose, this.coinType, this.account, change, index];
    };
    BIP44.prototype.pathString = function (index, change) {
        if (change === void 0) { change = 0; }
        var path = this.path(index, change);
        return "m/" + path[0] + "'/" + path[1] + "'/" + path[2] + "'/" + path[3] + "/" + path[4];
    };
    return BIP44;
}());
exports.BIP44 = BIP44;
function getPathArray() {
    return new BIP44().path(0, 0);
}
exports.getPathArray = getPathArray;
function getPath() {
    return new BIP44().pathString(0, 0);
}
exports.getPath = getPath;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy93YWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0NBQXNDO0FBQ3RDLGtEQUEyQjtBQUMzQix3REFBaUM7QUFDakMsd0RBQWlDO0FBQ2pDLGlDQUErQjtBQUUvQjtJQUVFLDBCQUFZLE9BQU87UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDeEIsQ0FBQztJQUVNLGtDQUFPLEdBQWQ7UUFDRSwyRUFBMkU7UUFDM0UsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVNLG1DQUFRLEdBQWY7UUFDRSxJQUFNLE1BQU0sR0FBRyxtQkFBUyxDQUFDLGVBQWUsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQ3pCLElBQUksQ0FDTCxDQUFDO1FBQ0YsT0FBTyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLGlDQUFNLEdBQWIsVUFBYyxPQUFPO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUNuRSxDQUFDO0lBRU0sK0JBQUksR0FBWCxVQUFZLEdBQUc7UUFDYixPQUFPLG1CQUFTLENBQUMsU0FBUyxDQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksZUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUMxQixDQUFBO0lBQ0gsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxB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