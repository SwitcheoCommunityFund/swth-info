/*
  WsWrapper is a wrapper that helps to manage the socket connection with the server.
  Manages IDs for messages

  Methods:
    connect
    disconnect
    request
    subscribe
    unsubscribe
*/
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { getNetwork } from '../config';
/**
 * @deprecated
 * use WSConnector
 */
var WsWrapper = /** @class */ (function () {
    function WsWrapper(net, onMsgCallback) {
        this.isConnected = false;
        this.getBaseUrls = function (network) {
            var net = getNetwork(network);
            return net.WS_URL;
        };
        this.serverWsUrl = this.getBaseUrls(net);
        this.onMsgCallback = onMsgCallback;
    }
    WsWrapper.prototype.connect = function () {
        var _this = this;
        this.socket = new WebSocket(this.serverWsUrl);
        // Config socket
        this.socket.onopen = function () {
            _this.isConnected = true;
            console.log('socket is connected');
            _this.onMsgCallback("connected");
        };
        this.socket.onmessage = function (msg) {
            _this.onMsgCallback(msg);
        };
        this.socket.onclose = function () {
            _this.isConnected = false;
            console.log('socket off');
        };
    };
    WsWrapper.prototype.disconnect = function () {
        console.log("closing socket...");
        this.socket.close();
    };
    WsWrapper.prototype.checkIsConnected = function () {
        return this.isConnected;
    };
    // WS Get requests
    WsWrapper.prototype.wsGetOrderHistory = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_order_history',
                params: { market: params.market, address: params.address }
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetRecentTrades = function (msgId, p) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_recent_trades',
                params: { market: p.market }
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetCandlesticks = function (msgId, p) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_candlesticks',
                params: {
                    market: p.market, resolution: p.resolution,
                    from: p.from, to: p.to
                }
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetOpenOrders = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_open_orders',
                params: { market: params.market, address: params.address }
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetAccountTrades = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_account_trades',
                params: params,
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetMarketStats = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_market_stats',
                params: params,
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetLeverages = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_leverages',
                params: params,
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetOpenPositions = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_open_positions',
                params: params,
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.wsGetClosedPositions = function (msgId, params) {
        try {
            var msg = JSON.stringify({
                id: msgId,
                method: 'get_closed_positions',
                params: params,
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    // WS Subscriptions
    WsWrapper.prototype.subscribe = function (msgId, params) {
        var _this = this;
        try {
            var channelIds = params.map(function (p) { return _this.generateChannelId(p); });
            // console.log("Subscribing to " + msgId)
            var msg = JSON.stringify({
                id: msgId,
                method: 'subscribe',
                params: { "channels": __spreadArrays(channelIds) }
            });
            this.socket.send(msg);
        }
        catch (e) {
            console.log(e.message);
        }
    };
    WsWrapper.prototype.unsubscribe = function (msgId, params) {
        var _this = this;
        try {
            var channelIds = params.map(function (p) { return _this.generateChannelId(p); });
            // console.log("Unsubscribing to " + channelIds)
            var msg = JSON.stringify({
                id: msgId,
                method: 'unsubscribe',
                params: { "channels": __spreadArrays(channelIds) }
            });
            this.socket.send(msg);
        }
        catch (e) {
            // console.log(e.message)
        }
    };
    WsWrapper.prototype.generateChannelId = function (p) {
        switch (p.channel) {
            case 'candlesticks': {
                var _a = p, channel = _a.channel, market = _a.market, resolution = _a.resolution;
                return [channel, market, resolution].join('.');
            }
            case 'books': {
                var _b = p, channel = _b.channel, market = _b.market;
                return [channel, market].join('.');
            }
            case 'recent_trades': {
                var _c = p, channel = _c.channel, market = _c.market;
                return [channel, market].join('.');
            }
            case 'orders': {
                var _d = p, channel = _d.channel, address = _d.address;
                return [channel, address].join('.');
            }
            case 'orders_by_market': {
                var _e = p, channel = _e.channel, market = _e.market, address = _e.address;
                return [channel, market, address].join('.');
            }
            case 'balances': {
                var _f = p, channel = _f.channel, address = _f.address;
                return [channel, address].join('.');
            }
            case 'account_trades': {
                var _g = p, channel = _g.channel, address = _g.address;
                return [channel, address].join('.');
            }
            case 'account_trades_by_market': {
                var _h = p, channel = _h.channel, market = _h.market, address = _h.address;
                return [channel, market, address].join('.');
            }
            case 'market_stats': {
                var channel = p.channel;
                return [channel].join('.');
            }
            case 'market_stats_by_market': {
                var _j = p, channel = _j.channel, market = _j.market;
                return [channel, market].join('.');
            }
            case 'leverages': {
                var _k = p, channel = _k.channel, address = _k.address;
                return [channel, address].join('.');
            }
            case 'leverages_by_market': {
                var _l = p, channel = _l.channel, market = _l.market, address = _l.address;
                return [channel, market, address].join('.');
            }
            case 'positions': {
                var _m = p, channel = _m.channel, address = _m.address;
                return [channel, address].join('.');
            }
            case 'positions_by_market': {
                var _o = p, channel = _o.channel, market = _o.market, address = _o.address;
                return [channel, market, address].join('.');
            }
            default:
                throw new Error("Invalid subscription");
        }
    };
    WsWrapper.parseChannelId = function (rawChannelId) {
        var _a = rawChannelId.split("."), channel = _a[0], market = _a[1], resolution = _a[2], address = _a[3];
        switch (channel) {
            case 'candlesticks':
                return {
                    channel: channel,
                    market: market,
                    resolution: resolution,
                };
            case 'books':
                return {
                    channel: channel,
                    market: market,
                };
            case 'recent_trades':
                return {
                    channel: channel,
                    market: market,
                };
            case 'orders':
                return {
                    channel: channel,
                    address: address,
                };
            case 'orders_by_market':
                return {
                    channel: channel,
                    market: market,
                    address: address,
                };
            case 'balances':
                return {
                    channel: channel,
                    address: address,
                };
            case 'account_trades':
                return {
                    channel: channel,
                    address: address,
                };
            case 'account_trades_by_market':
                return {
                    channel: channel,
                    market: market,
                    address: address,
                };
            case 'market_stats':
                return {
                    channel: channel,
                };
            case 'market_stats_by_market':
                return {
                    channel: channel,
                    market: market,
                };
            case 'leverages':
                return {
                    channel: channel,
                    address: address,
                };
            case 'leverages_by_market':
                return {
                    channel: channel,
                    market: market,
                    address: address,
                };
            case 'positions':
                return {
                    channel: channel,
                    address: address,
                };
            case 'positions_by_market':
                return {
                    channel: channel,
                    market: market,
                    address: address,
                };
            default:
                throw new Error("Error parsing channelId");
        }
    };
    return WsWrapper;
}());
export { WsWrapper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3Nfd3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvYXBpL3dzX3dyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7RUFVRTs7Ozs7Ozs7QUFJRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBOEd0Qzs7O0dBR0c7QUFDSDtJQVlFLG1CQUFZLEdBQVksRUFBRSxhQUFrQjtRQVI1QyxnQkFBVyxHQUFZLEtBQUssQ0FBQTtRQUdyQixnQkFBVyxHQUFHLFVBQVUsT0FBTztZQUNwQyxJQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDL0IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFBO1FBQ25CLENBQUMsQ0FBQztRQUlBLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN4QyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQTtJQUNwQyxDQUFDO0lBRU0sMkJBQU8sR0FBZDtRQUFBLGlCQWtCQztRQWpCQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUU3QyxnQkFBZ0I7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUc7WUFDbkIsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUE7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1lBQ2xDLEtBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDakMsQ0FBQyxDQUFBO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsVUFBQyxHQUFRO1lBQy9CLEtBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDekIsQ0FBQyxDQUFBO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxP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