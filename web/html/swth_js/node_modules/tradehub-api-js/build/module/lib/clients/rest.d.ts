import { GasFees, WalletClient } from './wallet';
import * as types from '../types';
export declare enum Direction {
    long = "long",
    short = "short"
}
export interface REST {
    checkUsername(params: types.UsernameGetterParams): Promise<boolean>;
    getAccount(params?: types.AddressOnlyGetterParams): Promise<object>;
    getAccountTrades(params: types.GetTradesGetterParams): Promise<Array<object>>;
    getActiveWallets(params: types.TokenOnlyGetterParams): Promise<string>;
    getAllValidators(): Promise<Array<object>>;
    getAMMRewardPercentage(): Promise<null | types.GetAMMRewardPercentageResponse>;
    getAverageBlocktime(): Promise<string>;
    getBlocks(params?: types.PageOnlyGetterParams): Promise<Array<object>>;
    getCosmosBlockInfo(params: types.blockHeightGetter): Promise<any>;
    getInsuranceFundBalance(): Promise<Array<object>>;
    getLeaderboard(params: types.MarketOnlyGetterParams): Promise<Array<object>>;
    getLeverage(params: types.MarketAndAddressGetterParams): Promise<object>;
    getLiquidityPools(): Promise<null | types.GetLiquidityPoolsResponse>;
    getLiquidationTrades(): Promise<Array<object>>;
    getMarkets(): Promise<Array<object>>;
    getMarket(params: types.MarketOnlyGetterParams): Promise<object>;
    getMarketStats(params?: types.MarketOnlyGetterParams): Promise<Array<object>>;
    getNodes(): Promise<Array<object>>;
    getOrder(params: types.GetIDOnlyGetterParams): Promise<object>;
    getOrders(params: types.GetOrdersGetterParams): Promise<Array<object>>;
    getOpenOrders(params: types.GetOrdersGetterParams): Promise<Array<object>>;
    getOrderBook(params: types.MarketOnlyGetterParams): Promise<types.OrderBook>;
    getProfile(params?: types.AddressOnlyGetterParams): Promise<object>;
    getPrices(params: types.MarketOnlyGetterParams): Promise<object>;
    getRichList(params: types.TokenOnlyGetterParams): Promise<Array<object>>;
    getTotalBalances(): Promise<Array<object>>;
    getTrades(params: types.GetTradesGetterParams): Promise<Array<object>>;
    getToken(params: types.TokenOnlyGetterParams): Promise<any>;
    getTokens(): Promise<any>;
    getTx(params: types.GetIDOnlyGetterParams): Promise<object>;
    getTransfers(params?: types.AddressOnlyGetterParams): Promise<object>;
    getTxs(params?: types.GetTransactionsGetterParams): Promise<Array<object>>;
    getTxLog(params: types.GetIDOnlyGetterParams): Promise<object>;
    getTxTypes(): Promise<Array<string>>;
    getPositionsWithHighestPnL(params: types.MarketOnlyGetterParams): Promise<Array<object>>;
    getPositionsCloseToLiquidation(params: types.GetPositionsCloseToLiquidationParams): Promise<Array<object>>;
    getPositionsLargest(params: types.MarketOnlyGetterParams): Promise<Array<object>>;
    getPosition(params: types.MarketAndAddressGetterParams): Promise<object>;
    getPositions(params?: types.AddressOnlyGetterParams): Promise<Array<object>>;
    getWalletBalance(params?: types.AddressOnlyGetterParams): Promise<types.WalletBalance>;
    getStakedPoolTokenInfo(params: types.PoolIDAndAddressGetter): Promise<types.GetStakedPoolTokenInfoResponse | null>;
    getWeeklyRewards(): Promise<number | null>;
    getWeeklyPoolRewards(): Promise<number | null>;
    estimateUnclaimedRewards(params: types.PoolIDAndAddressGetter): Promise<types.AccruedRewardsResponse>;
    getVaultTypes(): Promise<Array<object>>;
    getVaults(params: types.AddressOnlyGetterParams): Promise<Array<object>>;
    getCommitmentCurve(): Promise<any>;
    getRewardCurve(): Promise<any>;
    getLastClaimedPoolReward(params: types.PoolIDAndAddressGetter): Promise<any>;
    getRewardHistory(params: types.PoolIDAndBlockHeightGetter): Promise<any>;
    getGasFees(): Promise<GasFees>;
    getRewardsDistributed(): Promise<types.RewardsDistributedResponse>;
    getStakingValidators(): Promise<any>;
    getUnbondingStakingValidators(): Promise<any>;
    getUnbondedStakingValidators(): Promise<any>;
    getStakingPool(): Promise<any>;
    getValidatorDelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorDelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorUnbondingDelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorRedelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getAllDelegatorDelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorDelegationRewards(params?: types.AddressOnlyGetterParams): Promise<any>;
    send(msg: types.SendTokensMsg, options?: types.Options): Promise<any>;
    createOrder(msg: types.CreateOrderMsg, options?: types.Options): Promise<any>;
    createOrders(msgs: types.CreateOrderMsg[], options?: types.Options): Promise<any>;
    cancelOrder(msg: types.CancelOrderMsg, options?: types.Options): Promise<any>;
    cancelOrders(msgs: types.CancelOrderMsg[], options?: types.Options): Promise<any>;
    editOrder(msg: types.EditOrderMsg, options?: types.Options): Promise<any>;
    editOrders(msgs: types.EditOrderMsg[], options?: types.Options): Promise<any>;
    cancelAll(msg: types.CancelAllMsg, options?: types.Options): Promise<any>;
    updateProfile(msg: types.UpdateProfileMsg, options?: types.Options): Promise<any>;
    setLeverage(msg: types.SetLeverageMsg, options?: types.Options): Promise<any>;
    setLeverages(msgs: types.SetLeverageMsg[], options?: types.Options): Promise<any>;
    createMarket(msg: types.CreateMarketMsg, options?: types.Options): Promise<any>;
    createMarkets(msgs: types.CreateMarketMsg[], options?: types.Options): Promise<any>;
    updateMarket(msg: types.UpdateMarketMsg, options?: types.Options): Promise<any>;
    initiateSettlement(msg: types.InitiateSettlementMsg, options?: types.Options): Promise<any>;
    initiateSettlements(msgs: types.InitiateSettlementMsg[], options?: types.Options): Promise<any>;
    editMargin(params: types.EditMarginMsg, options?: types.Options): Promise<any>;
    editMargins(msgs: types.EditMarginMsg[], options?: types.Options): Promise<any>;
    createToken(msg: types.CreateTokenMsg, options?: types.Options): Promise<any>;
    createTokens(msgs: types.CreateTokenMsg[], options?: types.Options): Promise<any>;
    createVaultType(msg: types.CreateVaultTypeMsg, options?: types.Options): Promise<any>;
    addCollateral(msg: types.AddCollateralMsg, options?: types.Options): Promise<any>;
    removeCollateral(msg: types.RemoveCollateralMsg, options?: types.Options): Promise<any>;
    addDebt(msg: types.AddDebtMsg, options?: types.Options): Promise<any>;
    removeDebt(msg: types.RemoveDebtMsg, options?: types.Options): Promise<any>;
    addLiquidity(msg: types.AddLiquidityMsg, options?: types.Options): Promise<any>;
    removeLiquidity(msg: types.RemoveLiquidityMsg, options?: types.Options): Promise<any>;
    createPool(msg: types.CreatePoolMsg, options?: types.Options): Promise<any>;
    createPoolWithLiquidity(msg: types.CreatePoolWithLiquidityMsg, options?: types.Options): Promise<any>;
    linkPool(msg: types.LinkPoolMsg, options?: types.Options): Promise<any>;
    unlinkPool(msg: types.UnlinkPoolMsg, options?: types.Options): Promise<any>;
    submitProposal<T>(msg: types.SubmitProposalMsg<T>, options?: types.Options): Promise<any>;
    depositProposal(msg: types.DepositProposalMsg, options?: types.Options): Promise<any>;
    voteProposal(msg: types.VoteProposalMsg, options?: types.Options): Promise<any>;
    createOracle(msg: types.CreateOracleMsg, options?: types.Options): Promise<any>;
    createVote(msg: types.CreateVoteMsg, options?: types.Options): Promise<any>;
    createValidator(msg: types.CreateValidatorMsg, options?: types.Options): Promise<any>;
    delegateTokens(msg: types.DelegateTokensMsg, options?: types.Options): Promise<any>;
    unbondTokens(msg: types.BeginUnbondingTokensMsg, options?: types.Options): Promise<any>;
    redelegateTokens(msg: types.BeginRedelegatingTokensMsg, options?: types.Options): Promise<any>;
    withdrawDelegatorRewards(msg: types.WithdrawDelegatorRewardsMsg, options?: types.Options): Promise<any>;
    withdrawAllDelegatorRewards(msg: types.WithdrawAllDelegatorRewardsParams, options?: types.Options): Promise<any>;
    createSubAccount(msg: types.CreateSubAccountMsg, options?: types.Options): Promise<any>;
    activateSubAccount(msg: types.ActivateSubAccountMsg, options?: types.Options): Promise<any>;
    createWithdrawal(msg: types.CreateWithdrawalMsg, blockchain: string, options?: types.Options): Promise<any>;
    mintTokens(msg: types.MintTokenRequest): Promise<any>;
    setRewardsWeights(msg: types.SetRewardsWeightsMsg, options?: types.Options): Promise<any>;
    setRewardCurve(msg: types.SetRewardCurveMsg, options?: types.Options): Promise<any>;
    setCommitmentCurve(msg: types.SetCommitmentCurveMsg, options?: types.Options): Promise<any>;
    stakePoolToken(msg: types.StakePoolTokenMsg, options?: types.Options): Promise<any>;
    unstakePoolToken(msg: types.UnstakePoolTokenMsg, options?: types.Options): Promise<any>;
    claimPoolRewards(msg: types.ClaimPoolRewardsMsg, options?: types.Options): Promise<any>;
    setMsgFee(msg: types.SetMsgFeeMsg, options?: types.Options): Promise<any>;
    getLastClaimedPoolReward(params: types.PoolIDAndAddressGetter): Promise<any>;
    getRewardHistory(params: types.PoolIDAndBlockHeightGetter): Promise<any>;
    getGasFees(): Promise<GasFees>;
}
export declare class RestClient implements REST {
    readonly baseUrl: string;
    readonly cosmosBaseUrl: string;
    readonly wallet: WalletClient;
    constructor(options: {
        network: string;
        wallet?: WalletClient;
    });
    protected fetchJson(relativeUrl: string): Promise<any>;
    protected fetchCosmosJson(relativeUrl: string): Promise<any>;
    private getFee;
    getAccount(params?: types.AddressOnlyGetterParams): Promise<any>;
    checkUsername(params: types.UsernameGetterParams): Promise<any>;
    getProfile(params?: types.AddressOnlyGetterParams): Promise<any>;
    getPosition(params: types.MarketAndAddressGetterParams): Promise<any>;
    getPositions(params?: types.AddressOnlyGetterParams): Promise<any>;
    getLeverage(params: types.MarketAndAddressGetterParams): Promise<any>;
    getOrder(params: types.GetIDOnlyGetterParams): Promise<any>;
    getOrders(params: types.GetOrdersGetterParams): Promise<any>;
    getOpenOrders(params: types.GetOrdersGetterParams): Promise<any>;
    getAccountTrades(params: types.GetTradesGetterParams): Promise<any>;
    getNodes(): Promise<any>;
    getWalletBalance(params?: types.AddressOnlyGetterParams): Promise<any>;
    getMarket(params: types.MarketOnlyGetterParams): Promise<any>;
    getOrderBook(params: types.MarketOnlyGetterParams): Promise<any>;
    getMarkets(): Promise<any>;
    getPrices(params: types.MarketOnlyGetterParams): Promise<any>;
    getMarketStats(params?: types.MarketOnlyGetterParams): Promise<any>;
    getInsuranceFundBalance(): Promise<any>;
    getTrades(options: types.GetTradesGetterParams): Promise<any>;
    getLiquidationTrades(): Promise<any>;
    getLiquidityPools(): Promise<null | types.GetLiquidityPoolsResponse>;
    getLeaderboard(params: types.MarketOnlyGetterParams): Promise<any>;
    getPositionsWithHighestPnL(params: types.MarketOnlyGetterParams): Promise<any>;
    getPositionsCloseToLiquidation(params: types.GetPositionsCloseToLiquidationParams): Promise<any>;
    getPositionsLargest(params: types.MarketOnlyGetterParams): Promise<any>;
    getActiveWallets(params: types.TokenOnlyGetterParams): Promise<any>;
    getAllValidators(): Promise<any>;
    getTx(params: types.GetIDOnlyGetterParams): Promise<any>;
    getTxs(params: types.GetTransactionsGetterParams): Promise<any>;
    getTxLog(params: types.GetIDOnlyGetterParams): Promise<any>;
    getTxTypes(): Promise<any>;
    getTotalBalances(): Promise<any>;
    getToken(params: types.TokenOnlyGetterParams): Promise<any>;
    getTokens(): Promise<any>;
    getRichList(params: types.TokenOnlyGetterParams): Promise<any>;
    getAverageBlocktime(): Promise<any>;
    getBlocks(params?: types.PageOnlyGetterParams): Promise<any>;
    getCosmosBlockInfo(params: types.blockHeightGetter): Promise<any>;
    getGasFees(): Promise<GasFees>;
    getAMMRewardPercentage(): Promise<null | types.GetAMMRewardPercentageResponse>;
    getTransfers(params?: types.AddressOnlyGetterParams): Promise<any>;
    getVaultTypes(): Promise<any>;
    getVaults(params?: types.AddressOnlyGetterParams): Promise<any>;
    getStakingValidators(): Promise<any>;
    getUnbondingStakingValidators(): Promise<any>;
    getUnbondedStakingValidators(): Promise<any>;
    getStakingPool(): Promise<any>;
    getValidatorDelegations(params: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorDelegations(params: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorUnbondingDelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorRedelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getAllDelegatorDelegations(params?: types.AddressOnlyGetterParams): Promise<any>;
    getDelegatorDelegationRewards(params?: types.AddressOnlyGetterParams): Promise<any>;
    getStakedPoolTokenInfo(params: types.PoolIDAndAddressGetter): Promise<types.GetStakedPoolTokenInfoResponse>;
    getWeeklyRewards(): Promise<number | null>;
    getWeeklyPoolRewards(): Promise<number>;
    getLastClaimedPoolReward(params: types.PoolIDAndAddressGetter): Promise<any>;
    getRewardHistory(params: types.PoolIDAndBlockHeightGetter): Promise<any>;
    estimateUnclaimedRewards(params: types.PoolIDAndAddressGetter): Promise<types.AccruedRewardsResponse>;
    getRewardCurve(): Promise<any>;
    getCommitmentCurve(): Promise<any>;
    getRewardsDistributed(): Promise<types.RewardsDistributedResponse>;
    createOrder(msg: types.CreateOrderMsg, options?: types.Options): Promise<any>;
    createOrders(msgs: types.CreateOrderMsg[], options?: types.Options): Promise<any>;
    cancelOrder(msg: types.CancelOrderMsg, options?: types.Options): Promise<any>;
    cancelOrders(msgs: types.CancelOrderMsg[], options?: types.Options): Promise<any>;
    editOrder(msg: types.EditOrderMsg, options?: types.Options): Promise<any>;
    editOrders(msgs: types.EditOrderMsg[], options?: types.Options): Promise<any>;
    cancelAll(msg: types.CancelAllMsg, options?: types.Options): Promise<any>;
    send(msg: types.SendTokensMsg, options?: types.Options): Promise<any>;
    updateProfile(msg: types.UpdateProfileMsg, options?: types.Options): Promise<any>;
    setLeverage(msg: types.SetLeverageMsg, options?: types.Options): Promise<any>;
    setLeverages(msgs: types.SetLeverageMsg[], options?: types.Options): Promise<any>;
    createMarket(msg: types.CreateMarketMsg, options?: types.Options): Promise<any>;
    createMarkets(msgs: types.CreateMarketMsg[], options?: types.Options): Promise<any>;
    updateMarket(msg: types.UpdateMarketMsg, options?: types.Options): Promise<any>;
    initiateSettlement(msg: types.InitiateSettlementMsg, options?: types.Options): Promise<any>;
    initiateSettlements(msgs: types.InitiateSettlementMsg[], options?: types.Options): Promise<any>;
    editMargin(params: types.EditMarginMsg, options?: types.Options): Promise<any>;
    editMargins(msgs: types.EditMarginMsg[], options?: types.Options): Promise<any>;
    createToken(msg: types.CreateTokenMsg, options?: types.Options): Promise<any>;
    createTokens(msgs: types.CreateTokenMsg[], options?: types.Options): Promise<any>;
    mintMultipleTestnetTokens(params: types.MintParams): Promise<any[]>;
    mintTestnetTokens(msg: types.MintTokenMsg, options?: types.Options): Promise<any>;
    createVaultType(msg: types.CreateVaultTypeMsg, options?: types.Options): Promise<any>;
    addCollateral(msg: types.AddCollateralMsg, options?: types.Options): Promise<any>;
    removeCollateral(msg: types.RemoveCollateralMsg, options?: types.Options): Promise<any>;
    addDebt(msg: types.AddDebtMsg, options?: types.Options): Promise<any>;
    removeDebt(msg: types.RemoveDebtMsg, options?: types.Options): Promise<any>;
    addLiquidity(msg: types.AddLiquidityMsg, options?: types.Options): Promise<any>;
    removeLiquidity(msg: types.RemoveLiquidityMsg, options?: types.Options): Promise<any>;
    createPool(msg: types.CreatePoolMsg, options?: types.Options): Promise<any>;
    createPoolWithLiquidity(msg: types.CreatePoolWithLiquidityMsg, options?: types.Options): Promise<any>;
    linkPool(msg: types.LinkPoolMsg, options?: types.Options): Promise<any>;
    unlinkPool(msg: types.UnlinkPoolMsg, options?: types.Options): Promise<any>;
    setRewardsWeights(msg: types.SetRewardsWeightsMsg, options?: types.Options): Promise<any>;
    setRewardCurve(msg: types.SetRewardCurveMsg, options?: types.Options): Promise<any>;
    setCommitmentCurve(msg: types.SetCommitmentCurveMsg, options?: types.Options): Promise<any>;
    stakePoolToken(msg: types.StakePoolTokenMsg, options?: types.Options): Promise<any>;
    unstakePoolToken(msg: types.UnstakePoolTokenMsg, options?: types.Options): Promise<any>;
    claimPoolRewards(msg: types.ClaimPoolRewardsMsg, options?: types.Options): Promise<any>;
    submitProposal<T>(msg: types.SubmitProposalMsg<T>, options?: types.Options): Promise<any>;
    depositProposal(msg: types.DepositProposalMsg, options?: types.Options): Promise<any>;
    voteProposal(msg: types.VoteProposalMsg, options?: types.Options): Promise<any>;
    createOracle(msg: types.CreateOracleMsg, options?: types.Options): Promise<any>;
    createVote(msg: types.CreateVoteMsg, options?: types.Options): Promise<any>;
    createValidator(msg: types.CreateValidatorMsg, options?: types.Options): Promise<any>;
    delegateTokens(msg: types.DelegateTokensMsg, options?: types.Options): Promise<any>;
    unbondTokens(msg: types.BeginUnbondingTokensMsg, options?: types.Options): Promise<any>;
    redelegateTokens(msg: types.BeginRedelegatingTokensMsg, options?: types.Options): Promise<any>;
    withdrawDelegatorRewards(msg: types.WithdrawDelegatorRewardsMsg, options?: types.Options): Promise<any>;
    withdrawAllDelegatorRewards(msg: types.WithdrawAllDelegatorRewardsParams, options?: types.Options): Promise<any>;
    createSubAccount(msg: types.CreateSubAccountMsg, options?: types.Options): Promise<any>;
    activateSubAccount(msg: types.ActivateSubAccountMsg, options?: types.Options): Promise<any>;
    formatWithdrawalAddress(address: any, blockchain: any): Promise<any>;
    createWithdrawal(msg: types.CreateWithdrawalMsg, blockchain: string, options?: types.Options): Promise<any>;
    mintTokensDirect(msg: types.MintTokenDirectMsg, options?: types.Options): Promise<any>;
    mintTokens(msg: types.MintTokenRequest): Promise<any>;
    setMsgFee(msg: types.SetMsgFeeMsg, options?: types.Options): Promise<any>;
}
