var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { BigNumber } from 'bignumber.js';
import { ethers } from 'ethers';
import fetch from '../utils/fetch';
import { wallet as neonWallet, u as neonUtils } from "@cityofzion/neon-js";
import dayjs from 'dayjs';
import { getNetwork, NETWORK as NET } from '../config';
import { Blockchain } from '../constants';
import * as types from '../types';
import { Fee } from '../containers';
export var Direction;
(function (Direction) {
    Direction["long"] = "long";
    Direction["short"] = "short";
})(Direction || (Direction = {}));
function getPool(pools, id) {
    for (var i = 0; i < pools.length; i++) {
        if (pools[i].pool_id === id) {
            return pools[i];
        }
    }
    return null;
}
function getTotalWeight(pools) {
    var total = 0;
    for (var i = 0; i < pools.length; i++) {
        total = total + parseInt(pools[i].rewards_weight);
    }
    return total;
}
var RestClient = /** @class */ (function () {
    function RestClient(options) {
        var network = options.network, wallet = options.wallet;
        this.baseUrl = getNetwork(network).REST_URL;
        this.cosmosBaseUrl = getNetwork(network).COSMOS_URL;
        this.wallet = wallet;
    }
    RestClient.prototype.fetchJson = function (relativeUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var url, res, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "" + this.baseUrl + relativeUrl;
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        json = _a.sent();
                        return [2 /*return*/, json];
                }
            });
        });
    };
    RestClient.prototype.fetchCosmosJson = function (relativeUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var url, res, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "" + this.cosmosBaseUrl + relativeUrl;
                        return [4 /*yield*/, fetch(url)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        json = _a.sent();
                        return [2 /*return*/, json];
                }
            });
        });
    };
    RestClient.prototype.getFee = function (msgType) {
        if (msgType in types.FEE_TYPES) {
            return this.wallet.fees[types.FEE_TYPES[msgType]];
        }
        return this.wallet.fees[types.FEE_TYPES.Default];
    };
    //
    // PUBLIC METHODS
    //
    // Account
    RestClient.prototype.getAccount = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_account?account=" + address)];
            });
        });
    };
    RestClient.prototype.checkUsername = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var username;
            return __generator(this, function (_a) {
                username = params.username;
                return [2 /*return*/, this.fetchJson("/username_check?username=" + username)];
            });
        });
    };
    RestClient.prototype.getProfile = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_profile?account=" + address)];
            });
        });
    };
    RestClient.prototype.getPosition = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                if (!params.address && !this.wallet) {
                    throw new Error('get_account: missing address param');
                }
                address = '';
                if (!params.address) {
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_position?account=" + address + "&market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getPositions = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_position?account=" + address)];
            });
        });
    };
    RestClient.prototype.getLeverage = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                if (!params.address && !this.wallet) {
                    throw new Error('get_account: missing address param');
                }
                address = '';
                if (!params.address) {
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_leverage?account=" + address + "&market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getOrder = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                id = params.id;
                return [2 /*return*/, this.fetchJson("/get_order?order_id=" + id)];
            });
        });
    };
    RestClient.prototype.getOrders = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var account, market, limit, beforeId, afterId, status, orderType, url;
            return __generator(this, function (_a) {
                account = params.account, market = params.market, limit = params.limit, beforeId = params.beforeId, afterId = params.afterId, status = params.status, orderType = params.orderType;
                url = '/get_orders?';
                if (!account) {
                    if (!this.wallet) {
                        url += "account=" + this.wallet.pubKeyBech32 + "&";
                    }
                }
                else {
                    url += "account=" + account + "&";
                }
                if (market) {
                    url += "market=" + market + "&";
                }
                if (limit) {
                    url += "limit=" + limit + "&";
                }
                if (beforeId) {
                    url += "before_id=" + beforeId + "&";
                }
                if (afterId) {
                    url += "after_id=" + afterId + "&";
                }
                if (status) {
                    url += "status=" + status + "&";
                }
                if (orderType) {
                    url += "order_type=" + orderType + "&";
                }
                return [2 /*return*/, this.fetchJson(url)];
            });
        });
    };
    RestClient.prototype.getOpenOrders = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var account, market, limit, beforeId, afterId, orderType, url;
            return __generator(this, function (_a) {
                account = params.account, market = params.market, limit = params.limit, beforeId = params.beforeId, afterId = params.afterId, orderType = params.orderType;
                url = '/get_orders?';
                if (account) {
                    url += "account=" + account + "&";
                }
                else {
                    url += "account=" + this.wallet.pubKeyBech32 + "&";
                }
                url += "order_status=open&";
                if (market) {
                    url += "market=" + market + "&";
                }
                if (limit) {
                    url += "limit=" + limit + "&";
                }
                if (beforeId) {
                    url += "before_id=" + beforeId + "&";
                }
                if (afterId) {
                    url += "after_id=" + afterId + "&";
                }
                if (orderType) {
                    url += "order_type=" + orderType + "&";
                }
                return [2 /*return*/, this.fetchJson(url)];
            });
        });
    };
    RestClient.prototype.getAccountTrades = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address, market, limit, beforeId, afterId, url;
            return __generator(this, function (_a) {
                address = params.address, market = params.market, limit = params.limit, beforeId = params.beforeId, afterId = params.afterId;
                url = '/get_trades_by_account?';
                if (!address && !this.wallet) {
                    throw new Error('get_account: missing address param');
                }
                if (!address) {
                    url += "account=" + this.wallet.pubKeyBech32 + "&";
                }
                else {
                    url += "account=" + address + "&";
                }
                if (market) {
                    url += "market=" + market + "&";
                }
                if (limit) {
                    url += "limit=" + limit + "&";
                }
                if (beforeId) {
                    url += "before_id=" + beforeId + "&";
                }
                if (afterId) {
                    url += "after_id=" + afterId + "&";
                }
                return [2 /*return*/, this.fetchJson(url)];
            });
        });
    };
    RestClient.prototype.getNodes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson('/monitor')];
            });
        });
    };
    RestClient.prototype.getWalletBalance = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_balance?account=" + address)];
            });
        });
    };
    // Market Info
    RestClient.prototype.getMarket = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_market?market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getOrderBook = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_orderbook?market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getMarkets = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_markets")];
            });
        });
    };
    RestClient.prototype.getPrices = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_prices?market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getMarketStats = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = '/get_market_stats';
                if (params) {
                    url = url + ("?market=" + params.market);
                }
                return [2 /*return*/, this.fetchJson(url)];
            });
        });
    };
    RestClient.prototype.getInsuranceFundBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_insurance_balance")];
            });
        });
    };
    RestClient.prototype.getTrades = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, market, limit, beforeId, afterId, url;
            return __generator(this, function (_a) {
                address = options.address, market = options.market, limit = options.limit, beforeId = options.beforeId, afterId = options.afterId;
                url = '/get_trades?';
                if (!address) {
                    if (this.wallet) {
                        url += "account=" + this.wallet.pubKeyBech32 + "&";
                    }
                }
                else {
                    url += "account=" + address + "&";
                }
                if (market) {
                    url += "market=" + market + "&";
                }
                if (limit) {
                    url += "limit=" + limit + "&";
                }
                if (beforeId) {
                    url += "before_id=" + beforeId + "&";
                }
                if (afterId) {
                    url += "after_id=" + afterId + "&";
                }
                return [2 /*return*/, this.fetchJson(url)];
            });
        });
    };
    RestClient.prototype.getLiquidationTrades = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_liquidations")];
            });
        });
    };
    RestClient.prototype.getLiquidityPools = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_liquidity_pools")];
            });
        });
    };
    // Leaderboard
    RestClient.prototype.getLeaderboard = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_top_r_profits?market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getPositionsWithHighestPnL = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_positions_sorted_by_pnl1?market=" + params.market)];
            });
        });
    };
    RestClient.prototype.getPositionsCloseToLiquidation = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var market, direction;
            return __generator(this, function (_a) {
                market = params.market, direction = params.direction;
                return [2 /*return*/, this.fetchJson("/get_positions_sorted_by_risk?market=" + market + "&direction=" + direction)];
            });
        });
    };
    RestClient.prototype.getPositionsLargest = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var market;
            return __generator(this, function (_a) {
                market = params.market;
                return [2 /*return*/, this.fetchJson("/get_positions_sorted_by_size?market=" + market)];
            });
        });
    };
    // Blockchain Stats
    RestClient.prototype.getActiveWallets = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = params.token;
                return [2 /*return*/, this.fetchJson("/get_active_wallets?token=" + token)];
            });
        });
    };
    RestClient.prototype.getAllValidators = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_all_validators")];
            });
        });
    };
    RestClient.prototype.getTx = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                id = params.id;
                return [2 /*return*/, this.fetchJson("/get_transaction?hash=" + id)];
            });
        });
    };
    RestClient.prototype.getTxs = function (params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var paramsArr, paramsStr, item;
            return __generator(this, function (_b) {
                paramsArr = (_a = Object.keys(params)) !== null && _a !== void 0 ? _a : [];
                paramsStr = '';
                if (paramsArr.length > 0) {
                    paramsStr = '?';
                }
                for (item = 0; item < paramsArr.length; item++) {
                    paramsStr = paramsStr + "&" + paramsArr[item] + "=" + (params[paramsArr[item]] || '');
                }
                return [2 /*return*/, this.fetchJson("/get_transactions" + paramsStr)];
            });
        });
    };
    RestClient.prototype.getTxLog = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                id = params.id;
                return [2 /*return*/, this.fetchJson("/get_tx_log?hash=" + id)];
            });
        });
    };
    RestClient.prototype.getTxTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_transaction_types")];
            });
        });
    };
    RestClient.prototype.getTotalBalances = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_total_balances")];
            });
        });
    };
    RestClient.prototype.getToken = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = params.token;
                return [2 /*return*/, this.fetchJson("/get_token?token=" + token)];
            });
        });
    };
    RestClient.prototype.getTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_tokens")];
            });
        });
    };
    RestClient.prototype.getRichList = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = params.token;
                return [2 /*return*/, this.fetchJson("/get_rich_list?=token=" + token)];
            });
        });
    };
    RestClient.prototype.getAverageBlocktime = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_block_time")];
            });
        });
    };
    RestClient.prototype.getBlocks = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = '/get_blocks';
                if (params) {
                    url = url + ("?page=" + params.page);
                }
                return [2 /*return*/, this.fetchJson(url)];
            });
        });
    };
    RestClient.prototype.getCosmosBlockInfo = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/blocks/" + params.blockheight)];
            });
        });
    };
    RestClient.prototype.getGasFees = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, fees;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchJson("/get_txns_fees")];
                    case 1:
                        response = _a.sent();
                        fees = {};
                        if (response.result) {
                            response.result.forEach(function (result) {
                                fees[result.msg_type] = result.fee;
                            });
                        }
                        return [2 /*return*/, fees];
                }
            });
        });
    };
    RestClient.prototype.getAMMRewardPercentage = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson('/get_amm_reward_percentage')];
            });
        });
    };
    RestClient.prototype.getTransfers = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_external_transfers?account=" + address)];
            });
        });
    };
    RestClient.prototype.getVaultTypes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_vault_types")];
            });
        });
    };
    RestClient.prototype.getVaults = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchJson("/get_vaults?address=" + address)];
            });
        });
    };
    // cosmos
    RestClient.prototype.getStakingValidators = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/staking/validators")];
            });
        });
    };
    RestClient.prototype.getUnbondingStakingValidators = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/staking/validators?status=unbonding")];
            });
        });
    };
    RestClient.prototype.getUnbondedStakingValidators = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/staking/validators?status=unbonded")];
            });
        });
    };
    RestClient.prototype.getStakingPool = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/staking/pool")];
            });
        });
    };
    RestClient.prototype.getValidatorDelegations = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchCosmosJson("/staking/validators/" + address + "/delegations")];
            });
        });
    };
    RestClient.prototype.getDelegatorDelegations = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchCosmosJson("/staking/delegators/" + address + "/delegations")];
            });
        });
    };
    RestClient.prototype.getDelegatorUnbondingDelegations = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchCosmosJson("/staking/delegators/" + address + "/unbonding_delegations")];
            });
        });
    };
    RestClient.prototype.getDelegatorRedelegations = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchCosmosJson("/staking/redelegations?delegator=" + address)];
            });
        });
    };
    RestClient.prototype.getAllDelegatorDelegations = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            return __generator(this, function (_a) {
                promises = [
                    this.getDelegatorDelegations(params),
                    this.getDelegatorUnbondingDelegations(params),
                    this.getDelegatorRedelegations(params),
                ];
                return [2 /*return*/, Promise.all(promises).then(function (responses) {
                        return {
                            delegations: responses[0],
                            unbonding: responses[1],
                            redelegations: responses[2],
                        };
                    })];
            });
        });
    };
    RestClient.prototype.getDelegatorDelegationRewards = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var address;
            return __generator(this, function (_a) {
                address = '';
                if (!params) {
                    if (!this.wallet) {
                        throw new Error('get_account: missing address param');
                    }
                    address = this.wallet.pubKeyBech32;
                }
                else {
                    address = params.address;
                }
                return [2 /*return*/, this.fetchCosmosJson("/distribution/delegators/" + address + "/rewards")];
            });
        });
    };
    RestClient.prototype.getStakedPoolTokenInfo = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var poolID, address;
            return __generator(this, function (_a) {
                poolID = params.poolID, address = params.address;
                return [2 /*return*/, this.fetchJson("/get_staked_pool_token?pool_id=" + poolID + "&account=" + address)];
            });
        });
    };
    RestClient.prototype.getWeeklyRewards = function () {
        return __awaiter(this, void 0, void 0, function () {
            var startTime, WEEKLY_DECAY, MIN_RATE, INITIAL_SUPPLY, SECONDS_IN_A_WEEK, difference, currentWeek, inflationRate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchJson("/get_inflation_start_time")];
                    case 1:
                        startTime = _a.sent();
                        WEEKLY_DECAY = new BigNumber(0.9835);
                        MIN_RATE = new BigNumber(0.0003);
                        INITIAL_SUPPLY = new BigNumber(1000000000);
                        SECONDS_IN_A_WEEK = new BigNumber(604800);
                        difference = new BigNumber(dayjs().diff(dayjs(startTime.block_time), 'second'));
                        currentWeek = difference.div(SECONDS_IN_A_WEEK).dp(0, BigNumber.ROUND_DOWN);
                        inflationRate = WEEKLY_DECAY.pow(currentWeek);
                        if (inflationRate.lt(MIN_RATE)) {
                            inflationRate = MIN_RATE;
                        }
                        return [2 /*return*/, INITIAL_SUPPLY.div(52).times(inflationRate).toNumber()];
                }
            });
        });
    };
    RestClient.prototype.getWeeklyPoolRewards = function () {
        return __awaiter(this, void 0, void 0, function () {
            var total, distribution, poolAllocation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWeeklyRewards()];
                    case 1:
                        total = _a.sent();
                        return [4 /*yield*/, this.fetchCosmosJson("/distribution/parameters")];
                    case 2:
                        distribution = _a.sent();
                        poolAllocation = new BigNumber(distribution.result.liquidity_provider_reward);
                        return [2 /*return*/, new BigNumber(total).times(poolAllocation).dp(8).toNumber()];
                }
            });
        });
    };
    RestClient.prototype.getLastClaimedPoolReward = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/liquiditypool/get_last_claim/" + params.poolID + "/" + params.address)];
            });
        });
    };
    RestClient.prototype.getRewardHistory = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchCosmosJson("/liquiditypool/get_reward_history/" + params.poolID + "/" + params.blockheight)];
            });
        });
    };
    RestClient.prototype.estimateUnclaimedRewards = function (params) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var accruedRewards, poolID, address, lastClaimed, lastHeight, allocation, shares, commitmentPower, weeklyRewards, pools, pool, currentTotalCommitmentPower, total, poolWeight, poolWeekRewards, blockInfo, estimatedStart, now, WEEKS_IN_SECONDS, diff, estimatedRewards;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        accruedRewards = {};
                        poolID = params.poolID, address = params.address;
                        return [4 /*yield*/, this.getLastClaimedPoolReward({ poolID: poolID, address: address })];
                    case 1:
                        lastClaimed = _b.sent();
                        lastHeight = lastClaimed.result;
                        return [4 /*yield*/, this.getRewardHistory({ poolID: poolID, blockheight: new BigNumber(lastClaimed.result).plus(1).toString() })
                            // get current share
                        ];
                    case 2:
                        allocation = _b.sent();
                        return [4 /*yield*/, this.getStakedPoolTokenInfo({ poolID: poolID, address: address })];
                    case 3:
                        shares = _b.sent();
                        commitmentPower = new BigNumber(((_a = shares.result) === null || _a === void 0 ? void 0 : _a.commitment_power) || '0');
                        // calculate accrued rewards based on history
                        if (!commitmentPower.isZero() && allocation && allocation.result) {
                            allocation.result.forEach(function (period) {
                                lastHeight = period.BlockHeight;
                                var totalCommit = new BigNumber(period.TotalCommitment);
                                var ratio = commitmentPower.div(totalCommit);
                                period.Rewards.forEach(function (reward) {
                                    var rewardCut = new BigNumber(reward.amount).times(ratio).integerValue(BigNumber.ROUND_DOWN);
                                    if (reward.denom in accruedRewards) {
                                        accruedRewards[reward.denom] = accruedRewards[reward.denom].plus(rewardCut);
                                    }
                                    else {
                                        accruedRewards[reward.denom] = rewardCut;
                                    }
                                });
                            });
                        }
                        if (!!commitmentPower.isZero()) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.getWeeklyPoolRewards()];
                    case 4:
                        weeklyRewards = _b.sent();
                        return [4 /*yield*/, this.getLiquidityPools()];
                    case 5:
                        pools = _b.sent();
                        pool = getPool(pools, parseInt(poolID));
                        currentTotalCommitmentPower = new BigNumber(pool.total_commitment);
                        total = getTotalWeight(pools);
                        poolWeight = parseInt(pool.rewards_weight);
                        poolWeekRewards = poolWeight / total * weeklyRewards;
                        return [4 /*yield*/, this.getCosmosBlockInfo({ blockheight: (parseInt(lastHeight) + 1).toString() })];
                    case 6:
                        blockInfo = _b.sent();
                        estimatedStart = dayjs(blockInfo.block.header.time);
                        now = dayjs();
                        WEEKS_IN_SECONDS = 604800;
                        diff = now.diff(estimatedStart, 'second');
                        estimatedRewards = new BigNumber(diff / WEEKS_IN_SECONDS * poolWeekRewards)
                            .times(commitmentPower).div(currentTotalCommitmentPower)
                            .shiftedBy(8).integerValue(BigNumber.ROUND_DOWN);
                        if ('swth' in accruedRewards) {
                            accruedRewards['swth'] = accruedRewards['swth'].plus(estimatedRewards);
                        }
                        else {
                            accruedRewards['swth'] = estimatedRewards;
                        }
                        _b.label = 7;
                    case 7: return [2 /*return*/, accruedRewards];
                }
            });
        });
    };
    RestClient.prototype.getRewardCurve = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_reward_curve")];
            });
        });
    };
    RestClient.prototype.getCommitmentCurve = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.fetchJson("/get_commitment_curve")];
            });
        });
    };
    RestClient.prototype.getRewardsDistributed = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.baseUrl === NET.DEVNET.REST_URL || this.baseUrl === NET.MAINNET.REST_URL) {
                    return [2 /*return*/, this.fetchJson("/get_collections?account=swth1jv65s3grqf6v6jl3dp4t6c9t9rk99cd8cpw26x")]; // swth address
                }
                return [2 /*return*/, this.fetchJson("/get_collections?account=tswth1jv65s3grqf6v6jl3dp4t6c9t9rk99cd8ukl6rr")]; // tswth address
            });
        });
    };
    //
    // PRIVATE METHODS
    //
    RestClient.prototype.createOrder = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createOrders([msg], options)];
            });
        });
    };
    RestClient.prototype.createOrders = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg, i) {
                    if (!msg.originator)
                        msg.originator = address;
                    if (msg.type === undefined) {
                        console.warn("msgs[" + i + "].type should be set, defaulting to limit");
                        msg.type = 'limit';
                    }
                    if (msg.is_post_only === undefined)
                        msg.is_post_only = false;
                    if (msg.is_reduce_only === undefined)
                        msg.is_reduce_only = false;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.CREATE_ORDER_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CREATE_ORDER_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CREATE_ORDER_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.cancelOrder = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.cancelOrders([msg], options)];
            });
        });
    };
    RestClient.prototype.cancelOrders = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg) {
                    if (!msg.originator)
                        msg.originator = address;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.CANCEL_ORDER_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CANCEL_ORDER_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CANCEL_ORDER_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.editOrder = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.editOrders([msg], options)];
            });
        });
    };
    RestClient.prototype.editOrders = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg) {
                    if (!msg.originator)
                        msg.originator = address;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.EDIT_ORDER_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.EDIT_ORDER_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.EDIT_ORDER_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.cancelAll = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.EDIT_ORDER_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CANCEL_ALL_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CANCEL_ALL_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.send = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.from_address) {
                    msg.from_address = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.SEND_TOKENS_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SEND_TOKENS_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SEND_TOKENS_TYPE], options)];
            });
        });
    };
    RestClient.prototype.updateProfile = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.UPDATE_PROFILE_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.UPDATE_PROFILE_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.UPDATE_PROFILE_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.setLeverage = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.setLeverages([msg], options)];
            });
        });
    };
    RestClient.prototype.setLeverages = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg) {
                    if (!msg.originator)
                        msg.originator = address;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.SET_LEVERAGE_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.SET_LEVERAGE_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.SET_LEVERAGE_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.createMarket = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createMarkets([msg], options)];
            });
        });
    };
    RestClient.prototype.createMarkets = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg) {
                    // msg.TickSize = new BigNumber(msg.TickSize).toFixed(18)
                    if (!msg.originator)
                        msg.originator = address;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.CREATE_MARKET_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CREATE_MARKET_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CREATE_MARKET_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.updateMarket = function (msg, options) {
        if (!msg.originator)
            msg.originator = this.wallet.pubKeyBech32;
        if ((!options || !options.fee) && this.wallet.fees) {
            var amount = this.getFee(types.UPDATE_MARKET_MSG_TYPE);
            return this.wallet.signAndBroadcast([msg], [types.UPDATE_MARKET_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') });
        }
        return this.wallet.signAndBroadcast([msg], [types.UPDATE_MARKET_MSG_TYPE], options);
    };
    RestClient.prototype.initiateSettlement = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.initiateSettlements([msg], options)];
            });
        });
    };
    RestClient.prototype.initiateSettlements = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg) {
                    if (!msg.originator)
                        msg.originator = address;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.INITIATE_SETTLEMENT_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.INITIATE_SETTLEMENT_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.INITIATE_SETTLEMENT_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.editMargin = function (params, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.editMargins([params], options)];
            });
        });
    };
    RestClient.prototype.editMargins = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            var _this = this;
            return __generator(this, function (_a) {
                msgs = msgs.map(function (msg) {
                    if (!msg.originator)
                        msg.originator = _this.wallet.pubKeyBech32;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.EDIT_MARGIN_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.EDIT_MARGIN_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.EDIT_MARGIN_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.createToken = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.createTokens([msg], options)];
            });
        });
    };
    RestClient.prototype.createTokens = function (msgs, options) {
        return __awaiter(this, void 0, void 0, function () {
            var address, amount;
            return __generator(this, function (_a) {
                address = this.wallet.pubKeyBech32;
                msgs = msgs.map(function (msg) {
                    if (!msg.originator)
                        msg.originator = address;
                    return msg;
                });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.CREATE_TOKEN_MSG_TYPE)).times(msgs.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CREATE_TOKEN_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(msgs, Array(msgs.length).fill(types.CREATE_TOKEN_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.mintMultipleTestnetTokens = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var toAddress, mint, amount, promises;
            var _this = this;
            return __generator(this, function (_a) {
                toAddress = params.toAddress, mint = params.mint;
                amount = new BigNumber(this.getFee(types.MINT_TOKEN_MSG_TYPE)).times(mint.length).toString();
                promises = mint.map(function (v) {
                    return _this.mintTestnetTokens({
                        to_address: toAddress,
                        amount: new BigNumber(v.amount).toFixed(18),
                        denom: v.denom,
                    }, { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') });
                });
                return [2 /*return*/, Promise.all(promises)];
            });
        });
    };
    RestClient.prototype.mintTestnetTokens = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.MINT_TOKEN_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.createVaultType = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_VAULT_TYPE_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_VAULT_TYPE_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_VAULT_TYPE_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.addCollateral = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.ADD_COLLATERAL_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ADD_COLLATERAL_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ADD_COLLATERAL_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.removeCollateral = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.REMOVE_COLLATERAL_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.REMOVE_COLLATERAL_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.REMOVE_COLLATERAL_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.addDebt = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.ADD_DEBT_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ADD_DEBT_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ADD_DEBT_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.removeDebt = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.REMOVE_DEBT_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.REMOVE_DEBT_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.REMOVE_DEBT_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.addLiquidity = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if (!msg.min_shares) {
                    msg.min_shares = '0';
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.ADD_LIQUIDITY_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ADD_LIQUIDITY_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ADD_LIQUIDITY_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.removeLiquidity = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.REMOVE_LIQUIDITY_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.REMOVE_LIQUIDITY_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.REMOVE_LIQUIDITY_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.createPool = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_POOL_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_POOL_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_POOL_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.createPoolWithLiquidity = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if (!options) {
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_POOL_WITH_LIQUIDITY_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: (new BigNumber(1000)).shiftedBy(8).toString() }], '100000000000') })];
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_POOL_WITH_LIQUIDITY_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_POOL_WITH_LIQUIDITY_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_POOL_WITH_LIQUIDITY_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.linkPool = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.LINK_POOL_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.LINK_POOL_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.LINK_POOL_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.unlinkPool = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.UNLINK_POOL_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.UNLINK_POOL_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.UNLINK_POOL_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.setRewardsWeights = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.SET_REWARDS_WEIGHTS_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_REWARDS_WEIGHTS_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_REWARDS_WEIGHTS_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.setRewardCurve = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.SET_REWARD_CURVE_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_REWARD_CURVE_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_REWARD_CURVE_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.setCommitmentCurve = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.SET_COMMITMENT_CURVE_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_COMMITMENT_CURVE_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_COMMITMENT_CURVE_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.stakePoolToken = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.STAKE_POOL_TOKEN_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.STAKE_POOL_TOKEN_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.STAKE_POOL_TOKEN_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.unstakePoolToken = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.UNSTAKE_POOL_TOKEN_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.UNSTAKE_POOL_TOKEN_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.UNSTAKE_POOL_TOKEN_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.claimPoolRewards = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator) {
                    msg.originator = this.wallet.pubKeyBech32;
                }
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CLAIM_POOL_REWARDS_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CLAIM_POOL_REWARDS_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CLAIM_POOL_REWARDS_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.submitProposal = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.proposer)
                    msg.proposer = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.SUBMIT_PROPOSAL_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SUBMIT_PROPOSAL_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SUBMIT_PROPOSAL_TYPE], options)];
            });
        });
    };
    RestClient.prototype.depositProposal = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.depositor)
                    msg.depositor = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.DEPOSIT_PROPOSAL_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.DEPOSIT_PROPOSAL_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.DEPOSIT_PROPOSAL_TYPE], options)];
            });
        });
    };
    RestClient.prototype.voteProposal = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.voter)
                    msg.voter = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.VOTE_PROPOSAL_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.VOTE_PROPOSAL_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.VOTE_PROPOSAL_TYPE], options)];
            });
        });
    };
    RestClient.prototype.createOracle = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_ORACLE_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_ORACLE_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_ORACLE_TYPE], options)];
            });
        });
    };
    RestClient.prototype.createVote = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_VOTE_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_VOTE_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_VOTE_TYPE], options)];
            });
        });
    };
    RestClient.prototype.createValidator = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_VALIDATOR_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_VALIDATOR_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_VALIDATOR_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.delegateTokens = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.DELEGATE_TOKENS_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.DELEGATE_TOKENS_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.DELEGATE_TOKENS_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.unbondTokens = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.BEGIN_UNBONDING_TOKENS_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.BEGIN_UNBONDING_TOKENS_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.BEGIN_UNBONDING_TOKENS_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.redelegateTokens = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.BEGIN_REDELEGATING_TOKENS_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.BEGIN_REDELEGATING_TOKENS_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.BEGIN_REDELEGATING_TOKENS_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.withdrawDelegatorRewards = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.WITHDRAW_DELEGATOR_REWARDS_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.WITHDRAW_DELEGATOR_REWARDS_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.WITHDRAW_DELEGATOR_REWARDS_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.withdrawAllDelegatorRewards = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var validatorAddresses, delegatorAddress, messages, amount;
            return __generator(this, function (_a) {
                validatorAddresses = msg.validatorAddresses, delegatorAddress = msg.delegatorAddress;
                messages = validatorAddresses.map(function (address) { return ({ validator_address: address, delegator_address: delegatorAddress }); });
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = new BigNumber(this.getFee(types.WITHDRAW_DELEGATOR_REWARDS_MSG_TYPE)).times(validatorAddresses.length).toString();
                    return [2 /*return*/, this.wallet.signAndBroadcast(messages, Array(validatorAddresses.length).fill(types.WITHDRAW_DELEGATOR_REWARDS_MSG_TYPE), { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast(messages, Array(validatorAddresses.length).fill(types.WITHDRAW_DELEGATOR_REWARDS_MSG_TYPE), options)];
            });
        });
    };
    RestClient.prototype.createSubAccount = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.CREATE_SUB_ACCOUNT_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_SUB_ACCOUNT_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_SUB_ACCOUNT_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.activateSubAccount = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.ACTIVATE_SUB_ACCOUNT_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ACTIVATE_SUB_ACCOUNT_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.ACTIVATE_SUB_ACCOUNT_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.formatWithdrawalAddress = function (address, blockchain) {
        return __awaiter(this, void 0, void 0, function () {
            var isValidAddress, scriptHash, isValidAddress, isContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (blockchain === Blockchain.Neo) {
                            isValidAddress = neonWallet.isAddress(address);
                            if (!isValidAddress) {
                                throw new Error('Invalid Neo address');
                            }
                            scriptHash = neonWallet.getScriptHashFromAddress(address);
                            // return the little endian version of the address
                            return [2 /*return*/, neonUtils.reverseHex(scriptHash)];
                        }
                        if (!(blockchain === Blockchain.Ethereum)) return [3 /*break*/, 2];
                        isValidAddress = ethers.utils.isAddress(address);
                        if (!isValidAddress) {
                            throw new Error('Invalid Ethereum address');
                        }
                        return [4 /*yield*/, this.wallet.isEthContract(address)];
                    case 1:
                        isContract = _a.sent();
                        if (isContract) {
                            throw new Error('Cannot withdraw to a contract address: ' + address);
                        }
                        return [2 /*return*/, address.substr(2)];
                    case 2: throw new Error('formatting of withdrawal address not yet supported for ' + blockchain);
                }
            });
        });
    };
    RestClient.prototype.createWithdrawal = function (msg, blockchain, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, amount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!msg.originator)
                            msg.originator = this.wallet.pubKeyBech32;
                        _a = msg;
                        return [4 /*yield*/, this.formatWithdrawalAddress(msg.to_address, blockchain)];
                    case 1:
                        _a.to_address = _b.sent();
                        if ((!options || !options.fee) && this.wallet.fees) {
                            amount = this.getFee(types.CREATE_WITHDRAWAL_TYPE);
                            return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_WITHDRAWAL_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                        }
                        return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.CREATE_WITHDRAWAL_TYPE], options)];
                }
            });
        });
    };
    RestClient.prototype.mintTokensDirect = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.MINT_TOKEN_MSG_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.MINT_TOKEN_MSG_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.MINT_TOKEN_MSG_TYPE], options)];
            });
        });
    };
    RestClient.prototype.mintTokens = function (msg) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, fetch(this.baseUrl + "/mint_tokens", { method: 'POST', body: JSON.stringify(msg) }).then(function (res) { return res.json(); })];
            });
        });
    };
    RestClient.prototype.setMsgFee = function (msg, options) {
        return __awaiter(this, void 0, void 0, function () {
            var amount;
            return __generator(this, function (_a) {
                if (!msg.originator)
                    msg.originator = this.wallet.pubKeyBech32;
                if ((!options || !options.fee) && this.wallet.fees) {
                    amount = this.getFee(types.SET_MESSAGE_FEE_TYPE);
                    return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_MESSAGE_FEE_TYPE], { fee: new Fee([{ denom: "swth", amount: amount }], '100000000000') })];
                }
                return [2 /*return*/, this.wallet.signAndBroadcast([msg], [types.SET_MESSAGE_FEE_TYPE], options)];
            });
        });
    };
    return RestClient;
}());
export { RestClient };
//# sourceMappingURL=data:application/json;base64,