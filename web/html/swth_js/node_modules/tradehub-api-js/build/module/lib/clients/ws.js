var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter } from 'events';
import { getNetwork } from '../config';
import WebSocket from 'isomorphic-ws';
/**
 * @deprecated use WSConnector
 */
export var MarketEvent;
(function (MarketEvent) {
    MarketEvent["SUB_MARKET_STATS"] = "market:sub:market_stats";
})(MarketEvent || (MarketEvent = {}));
/**
 * @deprecated use WSConnector
 */
export var ClientEvent;
(function (ClientEvent) {
    ClientEvent["Connected"] = "connected";
    ClientEvent["Disconnected"] = "disconnected";
    ClientEvent["Message"] = "message";
})(ClientEvent || (ClientEvent = {}));
/**
 * @deprecated use WSConnector
 */
var WsClient = /** @class */ (function (_super) {
    __extends(WsClient, _super);
    // private channelIdToId: Map<string, string> = new Map()
    function WsClient(network) {
        var _this = _super.call(this) || this;
        // this.socket = this.newWebSocket(getNetwork(network).WS_URL)
        _this.baseUrl = getNetwork(network).WS_URL;
        return _this;
    }
    // private newWebSocket(): WebSocket {
    //   this.socket = new WebSocket(this.baseUrl)
    //   this.socket.onopen = () => {
    //     console.log('ws connected')
    //     this.emit(ClientEvent.Connect)
    //   }
    //   this.socket.onclose = () => this.emit(ClientEvent.Disconnect)
    // this.socket.onmessage = (message) => {
    //   console.log('message', message)
    //   const data = JSON.parse(message.data)
    //   const {channel, result} = data
    //   let {id} = data
    //   if (id) {
    //     const action = id.split(':')[1]
    //     if (action === 'sub') {
    //       const [channelId] = result
    //       this.channelIdToId.set(channelId, id)
    //       id += ':ack'
    //     }
    //   } else if (channel) {
    //     id = this.channelIdToId.get(channel)
    //   }
    //   else {
    //     console.error('Unknown event:', data)
    //     return
    //   }
    //   const [clientName] = id.split(':')
    //   const event = {...data, id}
    //   const client = this[clientName]
    //   if (client) {
    //     client.ws.handleEvent(event)
    //   } else {
    //     console.error('Unknown client:', clientName)
    //   }
    // }
    // }
    WsClient.prototype.connect = function () {
        var _this = this;
        this.socket = new WebSocket(this.baseUrl);
        this.socket.onopen = function () {
            _this.emit(ClientEvent.Connected);
        };
        this.socket.onclose = function () { return _this.emit(ClientEvent.Disconnected); };
        this.socket.onmessage = function (message) {
            var data = JSON.parse(message.data);
            _this.emit(ClientEvent.Message, data);
            // const { channel, result } = data
            // let {id} = data
            // if (id) {
            //   const action = id.split(':')[1]
            //   if (action === 'sub') {
            //     const [channelId] = result
            //     this.channelIdToId.set(channelId, id)
            //     id += ':ack'
            //   }
            // } else if (channel) {
            //   id = this.channelIdToId.get(channel)
            // }
            // else {
            //   console.error('Unknown event:', data)
            //   return
            // }
            // const [clientName] = id.split(':')
            // const event = {...data, id}
            // const client = this[clientName]
            // if (client) {
            //   client.ws.handleEvent(event)
            // } else {
            //   console.error('Unknown client:', clientName)
            // }
        };
    };
    WsClient.prototype.disconnect = function () {
        this.socket.close();
        this.emit(ClientEvent.Disconnected);
    };
    WsClient.prototype.handleEvent = function (event) {
        this.emit(event.id, event);
    };
    WsClient.prototype.send = function (id, method, params) {
        try {
            this.socket.send(JSON.stringify({
                id: id,
                method: method,
                params: params,
            }));
        }
        catch (e) {
            console.error(e.message);
        }
    };
    WsClient.prototype.subscribe = function (id, channelId) {
        try {
            this.send(id, 'subscribe', { channels: [channelId] });
        }
        catch (e) {
            console.error(e.message);
        }
    };
    WsClient.prototype.unsubscribe = function (id, channelId) {
        try {
            this.socket.send(JSON.stringify({
                id: id,
                method: 'unsubscribe',
                params: { 'channels': [channelId] }
            }));
        }
        catch (e) {
            console.error(e.message);
        }
    };
    WsClient.prototype.subscribeMarketStats = function () {
        var channelId = 'market_stats';
        var id = "market:sub:" + channelId;
        this.subscribe(id, channelId);
    };
    WsClient.prototype.unsubscribeMarketStats = function () {
        var channelId = 'market_stats';
        var id = "market:unsub:" + channelId;
        this.unsubscribe(id, channelId);
    };
    return WsClient;
}(EventEmitter));
export { WsClient };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2NsaWVudHMvd3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDckMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUN0QyxPQUFPLFNBQVMsTUFBTSxlQUFlLENBQUE7QUFFckM7O0dBRUc7QUFDSCxNQUFNLENBQU4sSUFBWSxXQUVYO0FBRkQsV0FBWSxXQUFXO0lBQ3JCLDJEQUE0QyxDQUFBO0FBQzlDLENBQUMsRUFGVyxXQUFXLEtBQVgsV0FBVyxRQUV0QjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksV0FJWDtBQUpELFdBQVksV0FBVztJQUNyQixzQ0FBdUIsQ0FBQTtJQUN2Qiw0Q0FBNkIsQ0FBQTtJQUM3QixrQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBSlcsV0FBVyxLQUFYLFdBQVcsUUFJdEI7QUFHRDs7R0FFRztBQUNIO0lBQThCLDRCQUFZO0lBR3hDLHlEQUF5RDtJQUV6RCxrQkFBWSxPQUFlO1FBQTNCLFlBQ0UsaUJBQU8sU0FHUjtRQUZDLDhEQUE4RDtRQUM5RCxLQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUE7O0lBQzNDLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsOENBQThDO0lBRTlDLGlDQUFpQztJQUNqQyxrQ0FBa0M7SUFDbEMscUNBQXFDO0lBQ3JDLE1BQU07SUFDTixrRUFBa0U7SUFFaEUseUNBQXlDO0lBQ3pDLG9DQUFvQztJQUNwQywwQ0FBMEM7SUFDMUMsbUNBQW1DO0lBRW5DLG9CQUFvQjtJQUNwQixjQUFjO0lBQ2Qsc0NBQXNDO0lBQ3RDLDhCQUE4QjtJQUM5QixtQ0FBbUM7SUFDbkMsOENBQThDO0lBQzlDLHFCQUFxQjtJQUNyQixRQUFRO0lBQ1IsMEJB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