var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import TransportWebUSB from '@ledgerhq/hw-transport-webusb';
import { NEOAddress } from "../../../utils";
import NeonLedger, { getNEOBIP44String } from './NeonLedger';
import { AccountProvider } from "../AccountProvider";
var CONNECT_POLL_INTERVAL = 3000; // ms
var CONNECT_POLL_ATTEMPTS = 10; // attempts
var NeoLedgerAccount = /** @class */ (function (_super) {
    __extends(NeoLedgerAccount, _super);
    function NeoLedgerAccount(ledger, publicKey) {
        var _this = _super.call(this) || this;
        _this.ledger = ledger;
        _this.publicKey = publicKey;
        _this.scriptHash = NEOAddress.publicKeyToScriptHash(publicKey);
        _this.displayAddress = NEOAddress.publicKeyToAddress(publicKey);
        return _this;
    }
    NeoLedgerAccount.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var usbDevices, usbDevice, connectResult, connectionAttempts, ledger, publicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUSBDevices()];
                    case 1:
                        usbDevices = _a.sent();
                        if (!usbDevices.length) {
                            throw new Error('Could not connect to USB Ledger');
                        }
                        usbDevice = usbDevices[0];
                        connectResult = null;
                        connectionAttempts = 0;
                        NeoLedgerAccount._connectPolling = true;
                        _a.label = 2;
                    case 2:
                        if (!(connectionAttempts < CONNECT_POLL_ATTEMPTS)) return [3 /*break*/, 4];
                        connectionAttempts++;
                        // external signal to stop polling (e.g. timeout)
                        // exit loop
                        if (!NeoLedgerAccount._connectPolling) {
                            return [3 /*break*/, 4];
                        }
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var timedOut = false;
                                // start timeout to kill connection when interval duration
                                // is reached. Kills connection by resolving 
                                var timeoutId = setTimeout(function () {
                                    // set timeout to true so that if connection is successful
                                    // after timeout, it can be ignored.
                                    timedOut = true;
                                    // returns null result to indicate connection failure
                                    resolve(null);
                                }, CONNECT_POLL_INTERVAL);
                                NeoLedgerAccount.tryConnect(usbDevice).then(function (result) {
                                    // check for timeout signal, abandon result if timed out
                                    if (timedOut)
                                        return;
                                    // clear timeout timer, so it doesn't trigger timeout action
                                    clearTimeout(timeoutId);
                                    // return positive connection result
                                    resolve(result);
                                }).catch(reject);
                            })
                            // connection successful, exit loop
                        ];
                    case 3:
                        // attempt ccnnect
                        connectResult = _a.sent();
                        // connection successful, exit loop
                        if (connectResult) {
                            return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 2];
                    case 4:
                        // failed to connect after specified timeout
                        if (!connectResult) {
                            throw new Error('Failed to connect with USB device, please try again.');
                        }
                        ledger = connectResult[0], publicKey = connectResult[1];
                        return [2 /*return*/, new NeoLedgerAccount(ledger, publicKey)];
                }
            });
        });
    };
    /**
     * Used to try connecting with ledger, executes a public key request
     * on USB device to detect NEO app connection
     */
    NeoLedgerAccount.tryConnect = function (usbDevice) {
        return __awaiter(this, void 0, void 0, function () {
            var bipString, ledger, publicKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bipString = getNEOBIP44String();
                        return [4 /*yield*/, TransportWebUSB.open(usbDevice)
                            // get public key to assert that NEO app is open
                        ];
                    case 1:
                        ledger = _a.sent();
                        return [4 /*yield*/, NeonLedger.getPublicKey(ledger, bipString)];
                    case 2:
                        publicKey = _a.sent();
                        return [2 /*return*/, [ledger, publicKey]];
                }
            });
        });
    };
    NeoLedgerAccount.prototype.configureAddress = function (options) {
        this.options = options;
    };
    NeoLedgerAccount.prototype.privateKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Cannot retrieve private key from Ledger');
            });
        });
    };
    NeoLedgerAccount.prototype.sign = function (msg) {
        return __awaiter(this, void 0, void 0, function () {
            var bipString, ledger;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bipString = getNEOBIP44String();
                        ledger = this.useLedger();
                        return [4 /*yield*/, NeonLedger.getSignature(ledger, msg, bipString)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    NeoLedgerAccount.getUSBDevices = function () {
        return __awaiter(this, void 0, void 0, function () {
            var devices;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, NeonLedger.getDevicePaths(TransportWebUSB)];
                    case 1:
                        devices = _a.sent();
                        return [2 /*return*/, devices];
                }
            });
        });
    };
    NeoLedgerAccount.prototype.useLedger = function () {
        if (!this.ledger) {
            throw new Error('Ledger is not initialized');
        }
        return this.ledger;
    };
    NeoLedgerAccount._connectPolling = false;
    return NeoLedgerAccount;
}(AccountProvider));
export { NeoLedgerAccount };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmVvTGVkZ2VyQWNjb3VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvcHJvdmlkZXJzL2FjY291bnQvTmVvTGVkZ2VyQWNjb3VudC9OZW9MZWRnZXJBY2NvdW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLGVBQWUsTUFBTSwrQkFBK0IsQ0FBQTtBQUUzRCxPQUFPLEVBQWtCLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sVUFBVSxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJELElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFBLENBQUMsS0FBSztBQUN4QyxJQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQSxDQUFDLFdBQVc7QUFFNUM7SUFBc0Msb0NBQWU7SUFTbkQsMEJBQW9CLE1BQXVCLEVBQUUsU0FBaUI7UUFBOUQsWUFDRSxpQkFBTyxTQUtSO1FBSkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDcEIsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7UUFDMUIsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDN0QsS0FBSSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUE7O0lBQ2hFLENBQUM7SUFFWSx3QkFBTyxHQUFwQjs7Ozs7NEJBQ3FCLHFCQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBQTs7d0JBQXZDLFVBQVUsR0FBRyxTQUEwQjt3QkFFN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7NEJBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQTt5QkFDbkQ7d0JBRUssU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTt3QkFDM0IsYUFBYSxHQUFxQyxJQUFJLENBQUE7d0JBQ3RELGtCQUFrQixHQUFHLENBQUMsQ0FBQTt3QkFFMUIsZ0JBQWdCLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQTs7OzZCQUVoQyxDQUFBLGtCQUFrQixHQUFHLHFCQUFxQixDQUFBO3dCQUMvQyxrQkFBa0IsRUFBRSxDQUFBO3dCQUVwQixpREFBaUQ7d0JBQ2pELFlBQVk7d0JBQ1osSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsRUFBRTs0QkFDckMsd0JBQUs7eUJBQ047d0JBR2UscUJBQU0sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtnQ0FDaEQsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFBO2dDQUVwQiwwREFBMEQ7Z0NBQzFELDZDQUE2QztnQ0FDN0MsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDO29DQUN6QiwwREFBMEQ7b0NBQzFELG9DQUFvQztvQ0FDcEMsUUFBUSxHQUFHLElBQUksQ0FBQTtvQ0FFZixxREFBcUQ7b0NBQ3JELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQ0FDZixDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQTtnQ0FFekIsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07b0NBQ2hELHdEQUF3RDtvQ0FDeEQsSUFBSSxRQUFRO3dDQUFFLE9BQU07b0NBRXBCLDREQUE0RDtvQ0FDNUQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO29DQUV2QixvQ0FBb0M7b0NBQ3BDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQ0FDakIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBOzRCQUNsQixDQUFDLENBQUM7NEJBRUYsbUNBQW1DOzBCQUZqQzs7d0JBekJGLGtCQUFrQjt3QkFDbEIsYUFBYSxHQUFHLFNBd0JkLENBQUE7d0JBRUYsbUNBQW1DO3dCQUNuQyxJQUFJLGFBQWEsRUFBRTs0QkFDakIsd0JBQUs7eUJBQ047Ozt3QkFHSCw0Q0FBNEM7d0JBQzVDLElBQUksQ0FBQyxhQUFhLEVBQUU7NEJBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQTt5QkFDeEU7d0JBRU0sTUFBTSxHQUFlLGFBQWEsR0FBNUIsRUFBRSxTQUFTLEdBQUksYUFBYSxHQUFqQixDQUFpQjt3QkFDekMsc0JBQU8sSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQUE7Ozs7S0FDL0M7SUFFRDs7O09BR0c7SUFDa0IsMkJBQVUsR0FBL0IsVUFBZ0MsU0FBaUI7Ozs7Ozt3QkFDekMsU0FBUyxHQUFHLGlCQUFpQixFQUFFLENBQUE7d0JBQ3RCLHFCQUFNLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDOzRCQUVwRCxnREFBZ0Q7MEJBRkk7O3dCQUE5QyxNQUFNLEdBQUcsU0FBcUM7d0JBR2xDLHFCQUFNLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUFBOzt3QkFBNUQsU0FBUyxHQUFHLFNBQWdEO3dCQUVsRSxzQkFBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFBQTs7OztLQUMzQjtJQUVELDJDQUFnQixHQUFoQixVQUFpQixPQUF1QjtRQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUN4QixDQUFDO0lBRUsscUNBQVUsR0FBaEI7OztnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUE7OztLQUMzRDtJQUVLLCtCQUFJLEdBQVYsVUFBVyxHQUFXOzs7Ozs7d0JBQ2QsU0FBUyxHQUFHLGlCQUFpQixFQUFFLENBQUE7d0JBQy9CLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7d0JBQ3hCLHFCQUFNLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBQTs0QkFBNUQsc0JBQU8sU0FBcUQsRUFBQTs7OztLQUM3RDtJQUVvQiw4QkFBYSxHQUFsQzs7Ozs7NEJBQ2tCLHFCQUFNLFVBQVUsQ0FBQyxjQUFjLENBQUMsZUFBc0IsQ0FBQyxFQUFBOzt3QkFBakUsT0FBTyxHQUFHLFNBQXVEO3dCQUV2RSxzQkFBTyxPQUFPLEVBQUE7Ozs7S0FDZjtJQUVPLG9DQUFTLEdBQWpCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFBO1NBQzdDO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFBO0lBQ3BCLENBQUM7SUFsSGMsZ0NBQWUsR0FBRyxLQUFLLENBQUE7SUFtSHhDLHVCQUFDO0NBQUEsQUExSEQsQ0FBc0MsZUFBZSxHQTBIcEQ7U0ExSFksZ0JBQWdCIn0=