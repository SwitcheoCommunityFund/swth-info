var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { getAltStatusMessage } from "@ledgerhq/hw-transport";
import { u } from '@cityofzion/neon-core';
/**
 * Duplicated from @cityofzion/neon-ledger due to package incompatibility:
 * transpiled JS version throws "Cannot find module './plugin'"
 */
export var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["VALID_STATUS"] = 36864] = "VALID_STATUS";
    ErrorCode[ErrorCode["MSG_TOO_BIG"] = 27912] = "MSG_TOO_BIG";
    ErrorCode[ErrorCode["APP_CLOSED"] = 28160] = "APP_CLOSED";
    ErrorCode[ErrorCode["TX_DENIED"] = 27013] = "TX_DENIED";
})(ErrorCode || (ErrorCode = {}));
/**
 * Evaluates Transport Error thrown and rewrite the error message to be more user friendly.
 * @return error with modified message if found.
 */
export function evalTransportError(err) {
    var transportErr = err;
    switch (transportErr.statusCode) {
        case ErrorCode.APP_CLOSED:
            transportErr.message = "Your NEO app is closed! Please login.";
            break;
        case ErrorCode.MSG_TOO_BIG:
            transportErr.message =
                "Your transaction is too big for the ledger to sign!";
            break;
        case ErrorCode.TX_DENIED:
            transportErr.message = "Transaction signing denied";
            break;
        default:
            transportErr.message = getAltStatusMessage(transportErr.statusCode);
    }
    return err;
}
var DEFAULT_STATUSLIST = [ErrorCode.VALID_STATUS];
/**
 * Appends data to the Ledger for signature.
 * @param msg A string up to 510 characters (256 bytes)
 */
function appendDataForSignature(ledger, msg) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ledger.send(0x80, 0x02, 0x00, 0x00, Buffer.from(msg, "hex"), DEFAULT_STATUSLIST)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
/**
 * Appends data to the Ledger and returns the signature of the entire message that has been appended so far.
 * @param ledger
 * @param msg A string up to 510 characters (256 bytes)
 */
function finalizeDataForSignature(ledger, msg) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ledger.send(0x80, 0x02, 0x80, 0x00, Buffer.from(msg, "hex"), DEFAULT_STATUSLIST)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
/**
 * Returns a BIP44 string specific to NEO.
 */
export function getNEOBIP44String(address, change, account) {
    if (address === void 0) { address = 0; }
    if (change === void 0) { change = 0; }
    if (account === void 0) { account = 0; }
    var accountHex = to8BitHex(account + 0x80000000);
    var changeHex = to8BitHex(change);
    var addressHex = to8BitHex(address);
    return "8000002C" + "80000378" + accountHex + changeHex + addressHex;
}
/**
 * Returns the list of connected Ledger devices. Throw if Ledger is not supported by the computer.
 * @param ledgerLibrary
 */
export function getDevicePaths(ledgerLibrary) {
    return __awaiter(this, void 0, void 0, function () {
        var supported;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ledgerLibrary.isSupported()];
                case 1:
                    supported = _a.sent();
                    if (!supported) {
                        throw new Error("Your computer does not support the ledger!");
                    }
                    return [4 /*yield*/, ledgerLibrary.list()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
/**
 * Requests the public key of a requested address from the Ledger.
 * @param ledger The Ledger Transport.
 * @param bip44String The BIP44 string (40 bytes)
 * @returns An unencoded public key (65 bytes)
 */
export function getPublicKey(ledger, bip44String) {
    return __awaiter(this, void 0, void 0, function () {
        var response, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, ledger.send(0x80, 0x04, 0x00, 0x00, Buffer.from(bip44String, "hex"), DEFAULT_STATUSLIST)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.toString("hex").substring(0, 130)];
                case 2:
                    e_1 = _a.sent();
                    if (e_1.statusCode) {
                        throw evalTransportError(e_1);
                    }
                    throw e_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * Requests the device to sign a message using the NEO application.
 * @param ledger The Ledger Transport.
 * @param hex The message to sign as a hexstring.
 * @param bip44String The BIP44 string (40 bytes)
 * @returns Signature as a hexstring (64 bytes)
 */
export function getSignature(ledger, hex, bip44String) {
    return __awaiter(this, void 0, void 0, function () {
        var payload, chunks, i, response, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    payload = hex + bip44String;
                    chunks = payload.match(/.{1,510}/g) || [];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    i = 0;
                    _a.label = 2;
                case 2:
                    if (!(i < chunks.length - 1)) return [3 /*break*/, 5];
                    return [4 /*yield*/, appendDataForSignature(ledger, chunks[i])];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 2];
                case 5: return [4 /*yield*/, finalizeDataForSignature(ledger, chunks[chunks.length - 1])];
                case 6:
                    response = _a.sent();
                    if (response.readUIntBE(0, 2) === ErrorCode.VALID_STATUS) {
                        throw new Error("No more data but Ledger did not return signature!");
                    }
                    return [2 /*return*/, DerToHexSignature(response.toString("hex"))];
                case 7:
                    e_2 = _a.sent();
                    if (e_2.statusCode) {
                        throw evalTransportError(e_2);
                    }
                    throw e_2;
                case 8: return [2 /*return*/];
            }
        });
    });
}
/**
 * Converts a signature in DER format to HEX format.
 * @param response Signature in DER format
 * @returns Signature in HEX format (64 bytes)
 */
export function DerToHexSignature(response) {
    var ss = new u.StringStream(response);
    // The first byte is format. It is usually 0x30 (SEQ) or 0x31 (SET)
    // The second byte represents the total length of the DER module.
    ss.read(2);
    // Now we read each field off
    // Each field is encoded with a type byte, length byte followed by the data itself
    ss.read(1); // Read and drop the type
    var r = ss.readVarBytes();
    ss.read(1);
    var s = ss.readVarBytes();
    // We will need to ensure both integers are 32 bytes long
    var integers = [r, s].map(function (i) {
        if (i.length < 64) {
            i = "0".repeat(i.length - 64) + i;
        }
        if (i.length > 64) {
            i = i.substr(-64);
        }
        return i;
    });
    return integers.join("");
}
function to8BitHex(num) {
    var hex = num.toString(16);
    return "0".repeat(8 - hex.length) + hex;
}
export default {
    getDevicePaths: getDevicePaths,
    getPublicKey: getPublicKey,
    getSignature: getSignature,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmVvbkxlZGdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9saWIvcHJvdmlkZXJzL2FjY291bnQvTmVvTGVkZ2VyQWNjb3VudC9OZW9uTGVkZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQWtCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFFekM7OztHQUdHO0FBRUgsTUFBTSxDQUFOLElBQVksU0FLWDtBQUxELFdBQVksU0FBUztJQUNuQiw2REFBcUIsQ0FBQTtJQUNyQiwyREFBb0IsQ0FBQTtJQUNwQix5REFBbUIsQ0FBQTtJQUNuQix1REFBa0IsQ0FBQTtBQUNwQixDQUFDLEVBTFcsU0FBUyxLQUFULFNBQVMsUUFLcEI7QUFVRDs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsR0FBVTtJQUMzQyxJQUFNLFlBQVksR0FBRyxHQUEyQixDQUFDO0lBQ2pELFFBQVEsWUFBWSxDQUFDLFVBQVUsRUFBRTtRQUMvQixLQUFLLFNBQVMsQ0FBQyxVQUFVO1lBQ3ZCLFlBQVksQ0FBQyxPQUFPLEdBQUcsdUNBQXVDLENBQUM7WUFDL0QsTUFBTTtRQUNSLEtBQUssU0FBUyxDQUFDLFdBQVc7WUFDeEIsWUFBWSxDQUFDLE9BQU87Z0JBQ2xCLHFEQUFxRCxDQUFDO1lBQ3hELE1BQU07UUFDUixLQUFLLFNBQVMsQ0FBQyxTQUFTO1lBQ3RCLFlBQVksQ0FBQyxPQUFPLEdBQUcsNEJBQTRCLENBQUM7WUFDcEQsTUFBTTtRQUNSO1lBQ0UsWUFBWSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdkU7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxJQUFNLGtCQUFr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