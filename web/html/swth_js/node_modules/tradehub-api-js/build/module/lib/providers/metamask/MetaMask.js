var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
import * as ethSignUtils from 'eth-sig-util';
import RegistryContract from './registry_contract';
import { ethers } from 'ethers';
import { Network } from '../../types';
import { NETWORK } from '../../config';
var CONTRACT_HASH = (_a = {},
    // use same ropsten contract for all non-mainnet uses
    _a[Network.TestNet] = '0x23629C94F4e8b719094f5D1Ae1c1AA8d6d687966',
    _a[Network.DevNet] = '0x23629C94F4e8b719094f5D1Ae1c1AA8d6d687966',
    _a[Network.LocalHost] = '0x23629C94F4e8b719094f5D1Ae1c1AA8d6d687966',
    _a[Network.MainNet] = '0xf4552877A40c1527D38970F170993660084D4541',
    _a);
var ETH_CHAIN_NAMES = {
    1: 'MainNet',
    3: 'Ropsten',
};
var ENCRYPTION_VERSION = 'x25519-xsalsa20-poly1305';
var MNEMONIC_MATCH_REGEX = /-----BEGIN MNEMONIC PHRASE-----([a-z\s]*)-----END MNEMONIC PHRASE-----/mi;
var MNEMONIC_MATCH_REGEX_LEGACY = /^[a-z\s]*$/i;
var getRequiredEthChain = function (network) {
    if (network === Network.MainNet) {
        return 1;
    }
    return 3;
};
var getEncryptMessage = function (input) {
    return ("\n  !!! Attention !!! Please make sure you are connecting to https://app.dem.exchange, do not confirm decrypt if you're connecting to untrusted sites.\n  -----BEGIN MNEMONIC PHRASE-----\n  " + input + "\n  -----END MNEMONIC PHRASE-----\n  ").trim().replaceAll(/^\s+/gm, '');
};
/**
 * TODO: Add docs
 */
var MetaMask = /** @class */ (function () {
    function MetaMask(network) {
        this.network = network;
        this.metamaskAPI = null;
        this.provider = null;
        var providerUrl = NETWORK[network].ETH_URL;
        if (providerUrl) {
            this.provider = new ethers.providers.JsonRpcProvider(providerUrl);
        }
    }
    MetaMask.prototype.checkProvider = function () {
        if (!this.provider) {
            throw new Error("MetaMask login not supported for this network " + this.network);
        }
        return this.provider;
    };
    MetaMask.prototype.getConnectedAPI = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metamaskAPI;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.metamaskAPI && this.metamaskAPI.isConnected()) {
                            return [2 /*return*/, this.metamaskAPI];
                        }
                        metamaskAPI = window.ethereum;
                        if (metamaskAPI === undefined) {
                            throw new Error('MetaMask not connected, please check that your extension is enabled');
                        }
                        if (metamaskAPI.isConnected()) {
                            return [2 /*return*/, metamaskAPI];
                        }
                        return [4 /*yield*/, metamaskAPI.request({ method: 'eth_requestAccounts' })];
                    case 1:
                        _a.sent();
                        this.metamaskAPI = metamaskAPI;
                        return [2 /*return*/, this.metamaskAPI];
                }
            });
        });
    };
    MetaMask.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getConnectedAPI()];
            });
        });
    };
    MetaMask.prototype.defaultAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metamaskAPI, defaultAccount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConnectedAPI()];
                    case 1:
                        metamaskAPI = _a.sent();
                        return [4 /*yield*/, metamaskAPI.request({ method: 'eth_requestAccounts' })];
                    case 2:
                        defaultAccount = (_a.sent())[0];
                        if (!defaultAccount) {
                            throw new Error('No default account on MetaMask, please create one first');
                        }
                        return [2 /*return*/, defaultAccount];
                }
            });
        });
    };
    MetaMask.prototype.getStoredMnemonicCipher = function (account) {
        return __awaiter(this, void 0, void 0, function () {
            var contractHash, provider, contract, cipherTextHex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contractHash = this.getContractHash();
                        provider = this.checkProvider();
                        contract = new ethers.Contract(contractHash, RegistryContract.abi, provider);
                        return [4 /*yield*/, contract.map(account)];
                    case 1:
                        cipherTextHex = _a.sent();
                        if (!(cipherTextHex === null || cipherTextHex === void 0 ? void 0 : cipherTextHex.length) || cipherTextHex === '0x') {
                            // value would be '0x' if not initialized
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, cipherTextHex];
                }
            });
        });
    };
    MetaMask.prototype.encryptMnemonic = function (mnemonic) {
        return __awaiter(this, void 0, void 0, function () {
            var metamaskAPI, defaultAccount, publicKey, messageToEncrypt, cipher, version, nonce, ephemPublicKey, ciphertext, encryptedMnemonic;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConnectedAPI()];
                    case 1:
                        metamaskAPI = _a.sent();
                        return [4 /*yield*/, this.defaultAccount()];
                    case 2:
                        defaultAccount = _a.sent();
                        return [4 /*yield*/, metamaskAPI.request({
                                method: 'eth_getEncryptionPublicKey',
                                params: [defaultAccount],
                            })];
                    case 3:
                        publicKey = _a.sent();
                        messageToEncrypt = getEncryptMessage(mnemonic);
                        cipher = ethSignUtils.encrypt(publicKey, {
                            data: messageToEncrypt,
                        }, ENCRYPTION_VERSION);
                        version = cipher.version, nonce = cipher.nonce, ephemPublicKey = cipher.ephemPublicKey, ciphertext = cipher.ciphertext;
                        encryptedMnemonic = ethers.utils.toUtf8Bytes([
                            version,
                            nonce,
                            ephemPublicKey,
                            ciphertext,
                        ].join('.'));
                        return [2 /*return*/, Buffer.from(encryptedMnemonic).toString('hex')];
                }
            });
        });
    };
    MetaMask.prototype.storeMnemonic = function (encryptedMnemonic) {
        return __awaiter(this, void 0, void 0, function () {
            var metamaskAPI, defaultAccount, storedMnemonicCipher, contractHash, provider, contract, dataBytes, unsignedTx, txHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConnectedAPI()];
                    case 1:
                        metamaskAPI = _a.sent();
                        return [4 /*yield*/, this.defaultAccount()];
                    case 2:
                        defaultAccount = _a.sent();
                        return [4 /*yield*/, this.getStoredMnemonicCipher(defaultAccount)];
                    case 3:
                        storedMnemonicCipher = _a.sent();
                        if (storedMnemonicCipher) {
                            throw new Error('Cannot store key on registry - key already exists for ETH account');
                        }
                        contractHash = this.getContractHash();
                        provider = this.checkProvider();
                        contract = new ethers.Contract(contractHash, RegistryContract.abi, provider);
                        dataBytes = Buffer.from(encryptedMnemonic, 'hex');
                        return [4 /*yield*/, contract.populateTransaction.Store(dataBytes)];
                    case 4:
                        unsignedTx = _a.sent();
                        return [4 /*yield*/, metamaskAPI.request({
                                method: 'eth_sendTransaction',
                                params: [__assign(__assign({}, unsignedTx), { from: defaultAccount })],
                            })];
                    case 5:
                        txHash = _a.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    MetaMask.prototype.login = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var metamaskAPI, defaultAccount, cipherTextHex, chainIdHex, chainId, requiredChainId, requiredNetworkName, cipherText, _c, version, nonce, ephemPublicKey, ciphertext, cipher, decryptedCipherText, match;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, this.getConnectedAPI()];
                    case 1:
                        metamaskAPI = _d.sent();
                        return [4 /*yield*/, this.defaultAccount()];
                    case 2:
                        defaultAccount = _d.sent();
                        return [4 /*yield*/, this.getStoredMnemonicCipher(defaultAccount)];
                    case 3:
                        cipherTextHex = _d.sent();
                        return [4 /*yield*/, metamaskAPI.request({ method: 'eth_chainId' })];
                    case 4:
                        chainIdHex = _d.sent();
                        chainId = parseInt(chainIdHex, 16);
                        requiredChainId = getRequiredEthChain(this.network);
                        if (chainId !== requiredChainId) {
                            requiredNetworkName = ETH_CHAIN_NAMES[requiredChainId] || ETH_CHAIN_NAMES[3];
                            throw new Error("MetaMask not connected to correct network, please use " + requiredNetworkName);
                        }
                        if (!cipherTextHex || !cipherTextHex.length) {
                            return [2 /*return*/, null];
                        }
                        cipherText = ethers.utils.toUtf8String(cipherTextHex);
                        _c = cipherText.split('.'), version = _c[0], nonce = _c[1], ephemPublicKey = _c[2], ciphertext = _c[3];
                        cipher = {
                            version: version,
                            nonce: nonce,
                            ephemPublicKey: ephemPublicKey,
                            ciphertext: ciphertext,
                        };
                        return [4 /*yield*/, metamaskAPI.request({
                                method: 'eth_decrypt',
                                params: [JSON.stringify(cipher), defaultAccount],
                            })];
                    case 5:
                        decryptedCipherText = (_a = (_d.sent())) === null || _a === void 0 ? void 0 : _a.trim();
                        // legacy encrypted mnemonic doesnt include warning message.
                        if (decryptedCipherText.match(MNEMONIC_MATCH_REGEX_LEGACY)) {
                            return [2 /*return*/, decryptedCipherText];
                        }
                        match = decryptedCipherText.match(MNEMONIC_MATCH_REGEX);
                        // invalid cipher
                        if (!match) {
                            console.error('invalid account info retrieved from contract');
                            console.error(decryptedCipherText);
                            throw new Error('Retrieved invalid account on blockchain, please check console for more information.');
                        }
                        return [2 /*return*/, (_b = match[1]) === null || _b === void 0 ? void 0 : _b.trim()];
                }
            });
        });
    };
    MetaMask.prototype.getContractHash = function () {
        var contractHash = CONTRACT_HASH[this.network];
        if (!contractHash) {
            throw new Error("MetaMask login is not supported on " + this.network);
        }
        return contractHash;
    };
    return MetaMask;
}());
export { MetaMask };
export default MetaMask;
//# sourceMappingURL=data:application/json;base64,