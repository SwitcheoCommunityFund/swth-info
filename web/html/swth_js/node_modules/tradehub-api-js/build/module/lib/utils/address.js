import * as BIP32 from 'bip32';
import * as BIP39 from 'bip39';
import bip44Constants from 'bip44-constants';
import { BIP44 } from './wallet';
import * as secp256r1 from 'secp256r1';
import * as secp256k1 from 'secp256k1';
import { sha256 } from 'sha.js';
import * as bech32 from 'bech32';
import * as wif from 'wif';
import * as ripemd160 from 'ripemd160';
import * as Base58Check from 'base58check';
import { getBech32Prefix } from '../config';
var BIP44_PURPOSE = 44;
var NEO_NAME = 'NEO';
var NEO_TOKEN_BIP44 = bip44Constants.filter(function (coin) { return coin[1] === NEO_NAME; })[0];
var NEO_COIN_TYPE = NEO_TOKEN_BIP44[0] - 0x80000000;
var SWTH_COIN_TYPE = 118;
/**
 * Convenience function to coalesce a string/buffer into a buffer
 *
 * @param stringOrBuffer a string or buffer type
 * @param encoding BufferEncoding from Buffer
 * @param force option to return an empty buffer regardless of input
 */
export var stringOrBufferToBuffer = function (stringOrBuffer, encoding, force) {
    if (encoding === void 0) { encoding = 'hex'; }
    if (force === void 0) { force = false; }
    if (typeof stringOrBuffer === 'string') {
        return Buffer.from(stringOrBuffer, encoding);
    }
    if (stringOrBuffer instanceof Buffer) {
        return stringOrBuffer;
    }
    // not a string nor buffer
    // e.g. null/undefined
    if (force) {
        return Buffer.alloc(0);
    }
    // if not forcing to return an empty buffer, return null
    return null;
};
export var randomMnemonic = function () {
    return BIP39.generateMnemonic();
};
export var wifEncodePrivateKey = function (privateKey, iter) {
    if (iter === void 0) { iter = 128; }
    var privateKeyBuf = stringOrBufferToBuffer(privateKey);
    return wif.encode(iter, privateKeyBuf, true);
};
export var SWTHAddress = {
    coinType: function () {
        return SWTH_COIN_TYPE;
    },
    publicKeyToScriptHash: function (publicKey) {
        var sha256Hash = new sha256().update(publicKey).digest();
        var ripemdHash = new ripemd160().update(sha256Hash).digest('hex');
        return ripemdHash;
    },
    publicKeyToAddress: function (publicKey, opts) {
        var scriptHash = SWTHAddress.publicKeyToScriptHash(publicKey);
        var words = bech32.toWords(Buffer.from(scriptHash));
        var addressPrefix = getBech32Prefix(opts.network, opts.type);
        var addressBech32 = bech32.encode(addressPrefix, words);
        return addressBech32;
    },
    encodePublicKey: function () {
        throw new Error('SWTH public keys do not compress');
    },
    mnemonicToPrivateKey: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var coinType = SWTHAddress.coinType();
        var path = new BIP44(BIP44_PURPOSE, coinType).pathString(account);
        var seed = BIP39.mnemonicToSeedSync(mnemonic);
        var masterKey = BIP32.fromSeed(seed);
        var hardenedDerivation = masterKey.derivePath(path);
        var privateKey = hardenedDerivation.privateKey;
        if (!privateKey)
            throw new Error('Private key derivation from mnemonic failed');
        return privateKey;
    },
    generateAddress: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var privateKey = SWTHAddress.mnemonicToPrivateKey(mnemonic, account);
        var publicKeyUint8Array = secp256k1.publicKeyCreate(privateKey, true);
        var publicKey = Buffer.from(publicKeyUint8Array);
        var address = SWTHAddress.publicKeyToAddress(publicKey);
        return address;
    },
};
export var NEOAddress = {
    coinType: function () {
        return NEO_COIN_TYPE;
    },
    publicKeyToScriptHash: function (publicKey) {
        var encodedPublicKey = NEOAddress.encodePublicKey(publicKey);
        var addressScript = Buffer.concat([
            Buffer.from([0x21]),
            encodedPublicKey,
            Buffer.from([0xac]),
        ]);
        var sha256Hash = new sha256().update(addressScript).digest();
        var ripemdHash = new ripemd160().update(sha256Hash).digest('hex');
        return ripemdHash;
    },
    publicKeyToAddress: function (publicKey) {
        var addressScript = NEOAddress.publicKeyToScriptHash(publicKey);
        var address = Base58Check.encode(addressScript, '17');
        return address;
    },
    encodePublicKey: function (unencodedPublicKey) {
        var unencPubKeyBuf = stringOrBufferToBuffer(unencodedPublicKey);
        if (unencPubKeyBuf.length <= 33) {
            // length indicates already encoded
            return unencPubKeyBuf;
        }
        var pointXHex = unencPubKeyBuf.slice(1, 33);
        var pointYEven = unencPubKeyBuf[unencPubKeyBuf.length - 1] % 2 === 0;
        var compressedPublicKey = Buffer.concat([
            Buffer.from([pointYEven ? 0x02 : 0x03]),
            pointXHex,
        ]);
        return compressedPublicKey;
    },
    mnemonicToPrivateKey: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var coinType = NEOAddress.coinType();
        var path = new BIP44(BIP44_PURPOSE, coinType).pathString(account);
        var seed = BIP39.mnemonicToSeedSync(mnemonic);
        var masterKey = BIP32.fromSeed(seed);
        var hardenedDerivation = masterKey.derivePath(path);
        var privateKey = hardenedDerivation.privateKey;
        if (!privateKey)
            throw new Error('Private key derivation from mnemonic failed');
        return privateKey;
    },
    generateAddress: function (mnemonic, account) {
        if (account === void 0) { account = 0; }
        var privateKey = NEOAddress.mnemonicToPrivateKey(mnemonic, account);
        var publicKeyUint8Array = secp256r1.publicKeyCreate(privateKey, true);
        var compressedPublicKey = Buffer.from(publicKeyUint8Array);
        var address = NEOAddress.publicKeyToAddress(compressedPublicKey);
        return address;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvdXRpbHMvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLEtBQUssS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUM5QixPQUFPLGNBQWMsTUFBTSxpQkFBaUIsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ2hDLE9BQU8sS0FBSyxTQUFTLE1BQU0sV0FBVyxDQUFBO0FBQ3RDLE9BQU8sS0FBSyxTQUFTLE1BQU0sV0FBVyxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDL0IsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFDaEMsT0FBTyxLQUFLLEdBQUcsTUFBTSxLQUFLLENBQUE7QUFDMUIsT0FBTyxLQUFLLFNBQVMsTUFBTSxXQUFXLENBQUE7QUFDdEMsT0FBTyxLQUFLLFdBQVcsTUFBTSxhQUFhLENBQUE7QUFFMUMsT0FBTyxFQUFFLGVBQWUsRUFBVyxNQUFNLFdBQVcsQ0FBQTtBQUVwRCxJQUFNLGFBQWEsR0FBRyxFQUFFLENBQUE7QUFFeEIsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFBO0FBQ2YsSUFBQSxlQUFlLEdBQUksY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQXBCLENBQW9CLENBQUMsR0FBdkQsQ0FBdUQ7QUFDN0UsSUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQTtBQUVyRCxJQUFNLGNBQWMsR0FBRyxHQUFHLENBQUE7QUFFMUI7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLElBQU0sc0JBQXNCLEdBQUcsVUFDcEMsY0FBZ0MsRUFDaEMs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