import * as bip39 from 'bip39';
import hdkey from 'hdkey';
import bip44Constants from 'bip44-constants';
import wif from 'wif';
import { Blockchain } from '../constants';
var HDWallet = /** @class */ (function () {
    function HDWallet() {
    }
    HDWallet.newWallet = function () {
        var mnemonic = bip39.generateMnemonic();
        var seed = bip39.mnemonicToSeed(mnemonic);
        var root = hdkey.fromMasterSeed(seed);
        return this.getWalletResult(root, mnemonic);
    };
    HDWallet.getWallet = function (mnemonic, skipValidate) {
        if (!skipValidate && !bip39.validateMnemonic(mnemonic)) {
            throw new Error('bad mnemonic from mnemonic by validateMnemonic');
        }
        var seed = bip39.mnemonicToSeedSync(mnemonic, '');
        var root = hdkey.fromMasterSeed(seed);
        return this.getWalletResult(root, mnemonic);
    };
    HDWallet.getWalletResult = function (root, mnemonic) {
        var _a;
        return _a = {},
            _a[Blockchain.Ethereum] = this.getKey(root, this.getCoinType(Blockchain.Ethereum), "hex" /* hex */),
            _a[Blockchain.Neo] = this.getKey(root, this.getCoinType(Blockchain.Neo), "wif" /* wif */),
            _a.mnemonic = mnemonic,
            _a;
    };
    HDWallet.getCoinType = function (blockchain) {
        var coins = bip44Constants.filter(function (item) { return item[1] === blockchain.toUpperCase(); });
        if (coins.length != 1) {
            throw new Error('Could not find maching bip44 constant');
        }
        var id = coins[0][0];
        return id - 0x80000000;
    };
    HDWallet.getKey = function (root, coinType, format) {
        // m/purpose'/coin_type'/account'/change/address_index
        var addrNode = root.derive("m/44'/" + coinType + "'/0'/0/0");
        switch (format) {
            case 'wif':
                return wif.encode(128, addrNode._privateKey, true);
            case 'hex':
                return addrNode._privateKey.toString('hex');
            default:
                throw new Error('unknown getKey format');
        }
    };
    return HDWallet;
}());
export { HDWallet };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGR3YWxsZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3V0aWxzL2hkd2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTyxDQUFBO0FBQzlCLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixPQUFPLGNBQWMsTUFBTSxpQkFBaUIsQ0FBQTtBQUM1QyxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUE7QUFFckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQVl6QztJQUFBO0lBb0RBLENBQUM7SUFuRGUsa0JBQVMsR0FBdkI7UUFDRSxJQUFNLFFBQVEsR0FBVyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtRQUVqRCxJQUFNLElBQUksR0FBUSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hELElBQU0sSUFBSSxHQUFVLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFOUMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRWEsa0JBQVMsR0FBdkIsVUFBd0IsUUFBZ0IsRUFBRSxZQUFzQjtRQUM5RCxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQTtTQUNsRTtRQUNELElBQU0sSUFBSSxHQUFRLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDeEQsSUFBTSxJQUFJLEdBQVUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUU5QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFnQmMsd0JBQWUsR0FBOUIsVUFBK0IsSUFBVyxFQUFFLFFBQWdCOztRQUMxRDtZQUNFLEdBQUMsVUFBVSxDQUFDLFFBQVEsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUNoQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGtCQUF1QjtZQUNwRSxHQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDM0IsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBdUI7WUFDL0QsV0FBUSxXQUFBO2VBQ1Q7SUFDSCxDQUFDO0lBRWMsb0JBQVcsR0FBMUIsVUFBMkIsVUFBc0I7UUFDL0MsSUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQXBDLENBQW9DLENBQUMsQ0FBQTtRQUNqRixJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQTtTQUN6RDtRQUNELElBQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUN0QixPQUFPLEVBQUUsR0FBRyxVQUFVLENBQUE7SUFDeEIsQ0FBQztJQS9CYyxlQUFNLEdBQUcsVUFBQyxJQUFXLEVBQUUsUUFBZ0IsRUFBRSxNQUF3QjtRQUM5RSxzREFBc0Q7UUFDdEQsSUFBTSxRQUFRLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFTLFFBQVEsYUFBVSxDQUFDLENBQUE7UUFFOUQsUUFBUSxNQUFNLEVBQUU7WUFDZCxLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ3BELEtBQUssS0FBSztnQkFDUixPQUFPLFFBQVEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQzdDO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtTQUMzQztJQUNILENBQUMsQ0FBQTtJQW9CSCxlQUFDO0NBQUEsQUFwREQsSUFvREM7U0FwRFksUUFBUSJ9