// tslint:disable:max-classes-per-file
import bech32 from 'bech32';
import ripemd160 from 'ripemd160';
import secp256k1 from 'secp256k1';
import { sha256 } from 'sha.js';
var PrivKeySecp256k1 = /** @class */ (function () {
    function PrivKeySecp256k1(privKey) {
        this.privKey = privKey;
    }
    PrivKeySecp256k1.prototype.toBytes = function () {
        // return marshalBinaryBare(this) // stub marshalBinaryBare with Uint8Array
        return new Uint8Array(this.privKey);
    };
    PrivKeySecp256k1.prototype.toPubKey = function () {
        var pubKey = secp256k1.publicKeyCreate(Buffer.from(this.privKey), true);
        return new PubKeySecp256k1(Buffer.from(pubKey));
    };
    PrivKeySecp256k1.prototype.equals = function (privKey) {
        return this.toBytes().toString() === privKey.toBytes().toString();
    };
    PrivKeySecp256k1.prototype.sign = function (msg) {
        return secp256k1.ecdsaSign(Buffer.from(new sha256().update(msg).digest()), Buffer.from(this.privKey));
    };
    return PrivKeySecp256k1;
}());
export { PrivKeySecp256k1 };
var PubKeySecp256k1 = /** @class */ (function () {
    function PubKeySecp256k1(pubKey) {
        this.pubKey = pubKey;
    }
    PubKeySecp256k1.prototype.toBytes = function () {
        // return marshalBinaryBare(this)
        return new Uint8Array(this.pubKey);
    };
    PubKeySecp256k1.prototype.toAddress = function () {
        var hash = new sha256().update(this.pubKey).digest('latin1');
        hash = new ripemd160().update(hash, 'latin1').digest('hex');
        return new Address(Buffer.from(hash, 'hex'));
    };
    PubKeySecp256k1.prototype.equals = function (pubKey) {
        return this.toBytes().toString() === pubKey.toBytes().toString();
    };
    PubKeySecp256k1.prototype.verify = function (msg, sig) {
        return secp256k1.ecdsaVerify(Buffer.from(msg), Buffer.from(sig), Buffer.from(this.pubKey));
    };
    return PubKeySecp256k1;
}());
export { PubKeySecp256k1 };
var Address = /** @class */ (function () {
    function Address(address) {
        this.address = address;
    }
    Address.fromBech32 = function (prefix, bech32Addr) {
        var _a = bech32.decode(bech32Addr), b32Prefix = _a.prefix, words = _a.words;
        if (b32Prefix !== prefix) {
            throw new Error("Prefix doesn't match");
        }
        return new Address(bech32.fromWords(words));
    };
    Address.prototype.toBech32 = function (prefix) {
        var words = bech32.toWords(Buffer.from(this.address));
        return bech32.encode(prefix, words);
    };
    Address.prototype.toBytes = function () {
        return new Uint8Array(this.address);
    };
    return Address;
}());
export { Address };
var BIP44 = /** @class */ (function () {
    function BIP44(purpose, coinType, account) {
        if (purpose === void 0) { purpose = 44; }
        if (coinType === void 0) { coinType = 118; }
        if (account === void 0) { account = 0; }
        this.purpose = purpose;
        this.coinType = coinType;
        this.account = account;
    }
    BIP44.prototype.path = function (index, change) {
        if (change === void 0) { change = 0; }
        if (this.purpose !== parseInt(this.purpose.toString(), 10)) {
            throw new Error('Purpose should be integer');
        }
        if (this.coinType !== parseInt(this.coinType.toString(), 10)) {
            throw new Error('CoinType should be integer');
        }
        if (this.account !== parseInt(this.account.toString(), 10)) {
            throw new Error('Account should be integer');
        }
        if (change !== parseInt(change.toString(), 10)) {
            throw new Error('Change should be integer');
        }
        if (index !== parseInt(index.toString(), 10)) {
            throw new Error('Index should be integer');
        }
        return [this.purpose, this.coinType, this.account, change, index];
    };
    BIP44.prototype.pathString = function (index, change) {
        if (change === void 0) { change = 0; }
        var path = this.path(index, change);
        return "m/" + path[0] + "'/" + path[1] + "'/" + path[2] + "'/" + path[3] + "/" + path[4];
    };
    return BIP44;
}());
export { BIP44 };
export function getPathArray() {
    return new BIP44().path(0, 0);
}
export function getPath() {
    return new BIP44().pathString(0, 0);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi91dGlscy93YWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBQ3RDLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQTtBQUMzQixPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUE7QUFDakMsT0FBTyxTQUFTLE1BQU0sV0FBVyxDQUFBO0FBQ2pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFL0I7SUFFRSwwQkFBWSxPQUFPO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQ3hCLENBQUM7SUFFTSxrQ0FBTyxHQUFkO1FBQ0UsMkVBQTJFO1FBQzNFLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTSxtQ0FBUSxHQUFmO1FBQ0UsSUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQ3pCLElBQUksQ0FDTCxDQUFDO1FBQ0YsT0FBTyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLGlDQUFNLEdBQWIsVUFBYyxPQUFPO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUNuRSxDQUFDO0lBRU0sK0JBQUksR0FBWCxVQUFZLEdBQUc7UUFDYixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFDOUMsTUFBTSxDQUFD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