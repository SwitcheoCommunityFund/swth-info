import * as WSConnectorTypes from './types';
export declare const WSChannel: typeof WSConnectorTypes.WSChannel;
export { WSConnectorTypes };
export interface WSStatusChangeListener {
    (connected: boolean): void;
}
/**
 * See WSConnector class members for description of
 * each configuration option.
 */
export interface WSConnectorOptions {
    endpoint: string;
    onStatusChange?: WSStatusChangeListener;
    debugMode?: boolean;
    timeoutConnect?: number;
    intervalHeartbeat?: number;
    timeoutHeartbeat?: number;
    disableHeartbeat?: boolean;
}
export interface WSResult<T = unknown> {
    requestId?: string;
    channel?: string;
    outOfSequence: boolean;
    timestamp: Date;
    data: T;
}
interface PromiseHandler {
    requestId?: string;
    resolve: (result?: WSResult<any>) => void;
    reject: (reason?: any) => void;
}
interface WSSubscriber {
    (result: WSResult<unknown>): void;
}
interface PromiseHandlerCache {
    [index: string]: PromiseHandler;
}
interface MessageSubscribers {
    [index: string]: WSSubscriber;
}
/**
 * WSConnector is a wrapper class to manage websocket connections with the server. It makes use of
 * WebSocket instances to connect to the server.
 *
 * Provides a synchronised way of executing requests on websocket @see {WSConnector.request}.
 *
 * Multiple subscriptions to the same channel is not supported at the moment, but would be trival
 * to implement.
 *
 * @example
 * (async () => {
 *   const wsConnector = new WSConnector({
 *     endpoint: WS_ENDPOINT,
 *   });
 *
 *   // run connect before executing any request/subscription
 *   await wsConnector.connect();
 *
 *   // request for data
 *   const result: WSResult<RecentTradesBody> = await wsConnector.request<RecentTradesBody>("get_recent_trades", {
 *      market: "swth_eth",
 *   });
 *
 *   // subscribe to new channel
 *   await wsConnector.subscribe({ channel: WSChannel.market_stats }, (result: WSResult<MarketStats>) => {
 *     console.log("received market stats", result);
 *   });
 *
 *   // unsubscribe
 *   await wsConnector.unsubscribe({ channel: WSChannel.market_stats });
 *
 *   // clean up
 *   await wsConnector.disconnect();
 * })();
 */
export declare class WSConnector {
    endpoint: string;
    debugMode: boolean;
    intervalHeartbeat: number;
    timeoutHeartbeat: number;
    timeoutConnect: number;
    disableHeartbeat: boolean;
    websocket: WebSocket | null;
    requestIdCounter: number;
    shouldConnect: boolean;
    connected: boolean;
    statusChangeListener?: WSStatusChangeListener;
    connectPromiseHandler: PromiseHandler | null;
    requestHandlers: PromiseHandlerCache;
    channelHandlers: MessageSubscribers;
    sequenceNumberCache: {
        [index: string]: number;
    };
    heartbeatInterval?: number;
    heartbeatTimeout?: number;
    initFailureTimeout?: number;
    static generateChannelId: (params: WSConnectorTypes.WsSubscriptionParams) => string;
    static parseChannelId: (rawChannelId: string) => WSConnectorTypes.WsSubscriptionParams;
    /**
     * Initialises an instance of WSConnector with the specified options
     * @param {WSConnectorOptions} options - options to configure the WSConnector instance
     */
    constructor(options: WSConnectorOptions);
    /**
     * Starts a connection to the server via a WebSocket instance
     * rejects the promise if connection cannot be established within WSConnector.timeoutConnect
     * milliseconds.
     *
     * @see WSConnector documentation for usage example
     */
    connect(): Promise<unknown>;
    /**
     * Disconnects the WebSocket connection with endpoint, releases resources and reverse states.
     * It is safe to call WSConnector.connect() again once WSConnector.disconnect() is called.
     *
     * @see WSConnector documentation for usage example
     */
    disconnect(): void;
    /**
     * Subscribes to the channels specified with the websocket. Sends a subscription data frame with
     * channel ID to WebSocket server.
     * @param {WSConnectorTypes.WsSubscriptionParams | WSConnectorTypes.WsSubscriptionParams[]} params a list of parameters specifying the channels to connect to
     * @param {WSSubscriber} handler an event handler that subscribes to the websocket channels
     *
     * @see WSConnector documentation for usage example
     */
    subscribe(params: WSConnectorTypes.WsSubscriptionParams | WSConnectorTypes.WsSubscriptionParams[], handler: WSSubscriber): void;
    /**
     * Unsubscribes to the websocket channels indicated in the params, by broadcasting an unsubscribe
     * message to these channels.
     * @param {WSConnectorTypes.WsSubscriptionParams | WSConnectorTypes.WsSubscriptionParams[]} params - channel(s) to unsubcribe to
     *
     * @see WSConnector documentation for usage example
     */
    unsubscribe(params: WSConnectorTypes.WsSubscriptionParams | WSConnectorTypes.WsSubscriptionParams[]): void;
    /**
     * Sends a message to the websocket channels.
     * @param {string} method - the type of message to send to the websocket channels. Available
     * options: subscribe, unsubscribe, get_recent_trades, get_candlesticks, get_open_orders,
     * get_account_trades, get_market_stats, get_leverages, get_open_positions, get_closed_positions
     * @param {any} params - An object containing parameters based on the specified method
     */
    send(method: string, params: any): void;
    /**
     * Requests data from the server endpoint
     * @param {string} method - the type of message to send to the websocket channels. Available
     * options: subscribe, unsubscribe, get_recent_trades, get_candlesticks, get_open_orders,
     * get_account_trades, get_market_stats, get_leverages, get_open_positions, get_closed_positions
     * @param {any} params - parameters based on the specified method
     *
     * @returns {Promise<WSResult<T>>} - a Promise resolving to the response from the endpoint
     *
     * @see WSConnector documentation for usage example
     */
    request<T = unknown>(method: string, params: any): Promise<WSResult<T>>;
    /**
     * Sends a message to the web socket
     * @param {string | Buffer} data - the message sent to the web socket
     */
    private sendMessage;
    /**
     * An event handler that is called when a connection is started with the WebSocket instance.
     * @param {Event} ev - the event that is called with
     */
    private onOpen;
    /**
     * An event handler that is called when a MessageEvent is emitted from the server
     * @param {MessageEvent} ev - the MessageEvent that is emitted from the server
     */
    private onMessage;
    /**
     * An event listener that is called when an error occurs on the WebSocket connection
     * @param {Event} ev - the error event occurring on the WebSocket connection
     */
    private onError;
    /**
     * An event handler that is triggered when the WebSocket connection is closed.
     * @param {Event} ev - the event called with this event handler.
     */
    private onClose;
    /**
     * An accessor to the WebSocket instance in this WSConnector instance
     */
    private getSocket;
    /**
     * Updates the connection status of the WebSocket instance
     */
    private updateConnectStatus;
    /**
     * Sends ping messages to the websocket to indicate to the server that the WebSocket connection with the server is still alive.
     */
    private sendHeartbeat;
    /**
     * Resets the heartbeat timeout. (timeout: after a specified amount of time, if there are no heartbeats detected from the server, the connection with the server is considered to be lost and the WebSocket connection will be closed)
     */
    private restartHeartbeatTimeout;
    /**
     * Disconnects the websocket connection when there is no heartbeat detected for more than the time specified in {@link WSConnector#timeoutHeartbeat}
     */
    private onHeartbeatTimeout;
    /**
     * Starts sending heartbeats to the server in regular intervals
     */
    private startHeartbeat;
    /**
     * Parses messages sent from the server via the WebSocket connection
     * @param {MessageEvent} ev - the MessageEvent emitted from the server
     * @returns {WSMessage<T>} - the parsed message
     */
    private parseWsMessage;
    /**
     * Rejects the WebSocket connection attempt when an error is encountered
     * @param {Error} error - the error causing the failure to connect with the websocket
     */
    private rejectConnect;
    /**
     * Disconnects the connection with the websocket
     */
    private disconnectWebsocket;
    /**
     * Initialises a new WebSocket instance with the specified endpoint.
     */
    private connectWebSocket;
    /**
     * A helper message to log methods when they are called
     * WSConnector#debugMode must be set to true to turn on logging.
     * @param {any[]} args - items to be logged
     */
    private debugLog;
}
